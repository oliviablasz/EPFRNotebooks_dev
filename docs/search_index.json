[["index.html", "EPFR Strategy Notebooks 1 Introduction", " EPFR Strategy Notebooks 1 Introduction The objectives of this notebook are; to present EPFRs proof of concept strategies, so that readers have a profound understanding of their inputs and composition. to enable the reader to construct signals and find initial value in the data. This book has ten proof-of-concept strategies created by Quantitative Analysts at EPFR. The backtesting methodology across each of these is relatively similar. They are quintile based, long/short, and we apply similar lookback periods for our backtests. We use a standard backtest period because we seek to avoid optimizing any one strategy. Our goal is to help the reader to construct a signal from EPFRs data, from which they can build off of and optimize for their own use cases. For this type of testing on our data, we provide the time series file available for download. To access the files you can find them readily available on the FTP, or email our team for assistance: click here. "],["epfr-library.html", "2 EPFR Library 2.1 About 2.2 ftp.get() 2.3 compound.flows() 2.4 bbk() 2.5 bbk.matrix()", " 2 EPFR Library The EPFR Library has an extensive list of applicable functions for use on our data and will be used in this demonstration of our strategies. To install the library EPFR, click here to download zip from github. Before installing the library EPFR, please install the dependencies this library requires: devtools, RODBC, and RDCOMClient. You can find the code to do this below. install.packages(&quot;RDCOMClient&quot;, repos = &quot;http://www.omegahat.net/R&quot;) x &lt;- c(&quot;devtools&quot;, &quot;RODBC&quot;, &quot;RDCOMClient&quot;) w &lt;- !is.element(x, dimnames(installed.packages())[[1]]) if (any(w)) for (y in x[w]) install.packages(y) Now you can properly install and load the library EPFR. library(&quot;devtools&quot;) install_github(&quot;vsrimurthy/EPFR&quot;) library(&quot;EPFR&quot;) 2.1 About Please refer to the library documentation for the description and complete list of parameters for each function. The functions that are used in this documents demonstration of EPFRs strategies include ftp.get(), compound.flows(), bbk(), Ctry.msci.members.rng(), Ctry.info(), ret.to.idx(), ret.idx.gaps.fix(), portfolio.beta.wrapper(), portfolio.residual(). 2.2 ftp.get() In this demonstration we will use the function ftp.get() from library('EPFR) to access files from EPFRs ftp which requires the RCurl library. library(RCurl) ## Warning: package &#39;RCurl&#39; was built under R version 4.1.2 To use this function you will set a file path to the csv file that will be used for your strategy and a local folder that this file will be downloaded to: file &lt;- &quot;EPFRHistory/Strategies/daily/FloPctCtry-daily.csv&quot; # FTP FILE - FloPctCtry-daily.csv fldr &lt;- &quot;C:\\\\temp&quot; # LOCAL FOLDER Next you will enter your username and password: usr &lt;- &quot;YOUR USER NAME&quot; # FTP USERNAME pwd &lt;- &quot;YOUR PASSWORD&quot; #FTP PASSWORD Now you can call ftp.get() with the following inputs: ftp.get(file, fldr, &quot;filetransport.epfrglobal.com&quot;, usr, pwd, &quot;ftp&quot;) # DOWNLOADS FILE FROM FTP TO LOCAL FOLDER, USING CREDENTIALS After the file is downloaded the flow files local path can be stored with follow line: flow.file &lt;- paste(fldr, ftp.file(file), sep = &quot;\\\\&quot;) # STORES FLOW FILE PATH 2.3 compound.flows() EPFRs function compound.flows() is very simple but quickly compounds our percentage flow file over a trailing lookback period. compound.flows(&quot;DailyPercentageFlow.csv&quot;, lookback = 20) 2.4 bbk() EPFRs function bbk() is more complex as it creates our standard output model. This function requires many different parameters such as our compounded daily percentage flow file and a return file. x &lt;- &quot;Compounded Percentage Flow&quot; y &lt;- &quot;Return&#39;s&quot; hz &lt;- &quot;Return horizon&quot; nBin &lt;- &quot;Number of bins (to sort)&quot; doW &lt;- &quot;Day of the week to trade on&quot; delay &lt;- &quot;Delay in getting the data&quot; idx &lt;- &quot;Universe&quot; Please refer to the library documentation for the complete list of parameters of this function. bbk(x, y, 1, hz[1], nBin, doW, T, 0, delay, idx) 2.5 bbk.matrix() bbk.matrix() "],["Filters.html", "3 Filters", " 3 Filters Work with Cam on adding some sort of tutorial/guide on this EPFR has an extensive list of over two dozen filters that can be applied to our data sets, therefore the signals we can get can be fine-tuned. The data can be filtered by: Investor Type (retail or institutional) Share class Fund domicile Theme (ESG, Sharia, ect.) Currency of flows Individual managers Duration Style Sector "],["flow-percentage-country-strategy.html", "4 Flow-Percentage Country Strategy 4.1 Overview 4.2 Daily Percentage Flow 4.3 Strategy Implementation", " 4 Flow-Percentage Country Strategy 4.1 Overview The Flow-Percentage Country Strategy is an equity based rotation strategy, which ranks different countries across a customized universe of both developed and emerging markets. This approach uses the stated allocations of equity funds with a cross-border focus and calculates percentage flow into countries. In terms of twenty-day percentage flows, the top fifth of ACWI countries outperform the bottom fifth by over 3% per year. The strategy works best in Emerging Markets, but adds value across the board. 4.2 Daily Percentage Flow The Flow-Percentage Country Strategy developed by EPFR Global is based on percentage flow into countries. In this section, the reader will gain an understanding of the aggregations which can be used to create a signal as well as the methodology behind daily percentage flow calculations. 4.2.1 Aggregations The first step is defining a subset of data to capture in calculating our signal. This strategy requires; Equity funds with a cross-boarder focus. These are essentially any fund that has a mandate spanning more than one country. The vast majority of these will be global and regional funds. Funds must report both daily flows and country allocations, since these values are needed to calculate Daily Percentage Flow. Cross-border equity funds, which report their country allocations and their fund flows, are a subset of those that only report their fund flows to EPFR. The figure below shows EPFRs coverage of this universe over time compared to our total coverage. Updated at the end of July each year Users looking for more specific detail can customize this aggregation even further using EPFRs fund-level or share class-level granularity. Some good examples would be Active/Passive, ETF or Mutual funds, Institutional or Retail. Users can use these tags to different degrees in creating aggregated signals to backtest. Further detail about this is available in section 3. This can be achieved using fund-level flow files or reaching out to EPFRs quant team for customized aggregations. 4.2.2 Calculation To begin calculating the Daily Percentage flow, we start with our subset of cross-border equity funds. To calculate the funds impact on a country, we scale a funds flow by multiplying it against its stated country allocation, which is available in EPFRs Country Allocation Database, on that day. EPFR releases country allocations of all funds on the \\(23^{\\text{rd}}\\) of each month (or the next available business day) at a monthly frequency. Hence, our calculation assumes constant country allocation between two consecutive release dates within the month. We then apply the same procedure to all funds with a fund flow and country allocation information and then sum the flows for each country across all funds. \\[\\text{Total Impact}_{c,t} = \\sum^{N}_{i=m}{\\text{Flow}_i \\times \\text{Allocation}_i}\\] Where: \\(\\text{Total Impact}\\) = the impact on a country \\(c\\), across all funds \\(i\\), for day \\(t\\) Additionally, we repeat the process across the same funds Assets held under Management (AuM), to get the total AuM held in a country. \\[\\text{Total AuM}_{c,t} = \\sum^{N}_{i=m}{\\text{AuM}_i \\times \\text{Allocation}_i}\\] Where: \\(\\text{Total AuM}\\) = the assets held in a country \\(c\\), across all funds \\(i\\), for day \\(t\\) Finally, to find the daily percentage flow for a country, we divide the Total Impact by the Total AuM. Then we repeat this across all different countries for the entire history. \\[\\text{Percentage Flow}_{c,t} = \\frac{\\text{Total Impact}_{c,t}}{\\text{Total AuM}_{c,t}}\\] Where: \\(\\text{Percentage Flow}\\) = the scaled flow as a percentage into a country \\(c\\), across all funds \\(i\\), for day \\(t\\) 4.2.3 Flow File The users may create flow percentages for their desired country aggregations and granularity using the methodology described in the previous section. EPFR also provides a pre-calculated aggregation for its users for the Daily Flow-Percentage Country Strategy. This file can be found on the FTP under the strategies folder. Please refer to the FTP Folder Structure section for the exact location of this file. This file contains daily cross-border equity fund flow data for 52 countries and is updated daily at 5:00 PM est. with a T+1 day lag. For this demonstration, we use the pre-calculated file FloPctCtry-daily.csv. Below shows a snippet of what this file contains. AU BR CA CN ID IN JP KR MX MY PH RU SG TH TR TW ZA AR CL CO CZ EG HU IL NZ NO PE PL SE CH GB AT BE DK FI FR DE GR IE IT NL PT ES HK US JO MA PK AE QA SA KW 20220201 0.0682839 0.0084836 0.1025408 0.0139744 0.0221570 0.0205982 0.0548555 0.0319277 0.0060054 0.0221536 0.0286116 0.0230859 0.0379905 0.0195777 0.0146236 0.0208210 0.0363276 0.0807825 0.0289586 0.0385508 0.0306830 0.0330318 0.0469420 0.0361752 0.0453934 0.1034383 -0.0009420 0.0483840 0.0732804 0.0681679 0.0814963 0.1422620 0.1951290 0.0597506 0.2557560 0.1649068 0.1873234 0.0161138 0.1056664 0.1899218 0.1672633 0.1732925 0.1840847 0.0328124 0.0580442 0.1000220 0.1490446 -0.0443664 0.0431735 0.0427901 0.0462380 0.0299807 20220202 0.1071915 0.0281719 0.0950954 0.0202414 0.0344230 0.0163766 0.1111745 0.0417981 0.0245983 0.0504768 -0.0090245 0.0232131 0.0608292 0.0215472 -0.0117807 0.0184948 0.0378151 0.0529031 0.0224223 0.0489514 0.0360707 0.0268137 0.0133663 0.0955032 0.0783371 0.1482123 0.0650883 0.0575084 0.1073821 0.1102016 0.1021990 0.1753984 0.2864324 0.0724588 0.3588564 0.1960113 0.2311478 0.0461036 0.1557974 0.2426154 0.1954004 0.3344284 0.2244875 0.0394673 0.1199526 0.1302887 0.0396339 -0.0027174 0.0435513 0.0366501 0.0279959 0.0179536 20220203 0.0232839 0.0232704 0.0761505 0.0289616 0.0273847 0.0345332 0.0218809 0.0518640 0.0100158 0.0419875 0.0341742 0.0317831 0.0142656 0.0407090 -0.0425790 0.0449413 0.0516080 -0.0154822 0.0202419 0.0298686 0.0427326 -0.0100498 0.0006513 0.0224383 0.0630011 0.0594039 0.0454787 0.0349888 0.0310588 0.0406977 0.0843723 0.0592398 0.0618084 0.0473398 0.0813880 0.0405348 0.0415332 0.0349092 0.0467131 0.0649067 0.0371971 0.0825533 0.0770435 0.0275676 0.0901542 0.0017727 0.0246136 -0.0329425 0.0539309 0.0525786 0.0450357 0.0293389 20220204 0.0427605 0.0005431 0.0182251 0.0287499 0.0712703 0.0435060 0.0363027 0.0484562 -0.0030307 0.0577206 0.0478340 -0.1376946 0.0192682 0.0321432 -0.1510468 0.0421362 0.0360338 0.0059707 0.0473132 0.0457560 0.0483058 -0.0528643 -0.1633261 -0.0060812 0.0199169 0.0299800 -0.0224904 -0.1080532 0.0151556 0.0154724 0.0360337 0.0249990 0.0172963 -0.0035172 0.0360927 0.0188039 0.0210176 -0.0338378 0.0008837 0.0172023 0.0118729 0.0078131 0.0379598 -0.0100599 0.0647590 -0.0866469 0.0035331 0.0121018 0.0245301 0.0388262 0.0097923 0.0293662 20220207 0.0441435 0.0664523 0.0375737 0.0818605 0.0600913 0.0626405 0.0510620 0.0711956 0.0639915 0.1208601 0.0704777 -0.0070066 0.0388531 0.1213585 -0.0351091 0.0684053 0.1530069 0.0202382 0.0663745 0.0377460 0.0608658 0.0361060 -0.0094240 0.0387820 0.0365660 0.0762125 0.0265846 -0.0243340 0.0134566 0.0106205 0.0437974 0.0323487 0.0402917 -0.0128579 0.0555223 0.0155998 0.0353678 0.0139098 0.0200929 0.0320488 -0.0032316 0.0231484 0.0331243 0.0682547 0.0168594 -0.0235971 0.3344607 0.1606458 0.0998821 0.1439076 0.0371702 0.0266549 20220208 0.0755702 0.1394943 0.0547752 0.0364907 0.0922338 0.0896671 0.0667618 0.0688405 0.1180297 0.1237705 0.0781433 -0.0512573 0.0673441 0.1097059 -0.0799028 0.0898746 0.1163105 0.0313015 0.0910412 0.0432795 0.0653109 0.1015608 -0.1620651 0.0553638 0.0604454 0.0494414 0.1915267 -0.0821655 0.0221925 0.0278058 0.0287122 0.0487003 0.0518997 -0.0119569 0.0578275 0.0392554 0.0331660 -0.0396982 0.0050530 0.0597397 0.0194525 0.0270428 0.0478461 -0.0445550 0.0560942 0.0545403 0.0111911 -0.0012755 0.1037661 0.1163175 0.1036285 0.0850615 We will download this file from the ftp using ftp.get(), more about this function can be referred to in section 2.2. file &lt;- &quot;EPFRHistory/Strategies/daily/FloPctCtry-daily.csv&quot; # PATH TO .csv FILE fldr &lt;- &quot;C:\\\\temp&quot; # LOCAL FOLDER ftp.get(file, fldr, &quot;filetransport.epfrglobal.com&quot;, w = &quot;username&quot;, h = &quot;password&quot;, &quot;ftp&quot;) # DOWNLOADS FILE FROM FTP TO LOCAL FOLDER, USING CREDENTIALS After downloading the csv file you will store its path as flow.file. A quick way to do this is shown below: flow.file &lt;- paste(fldr, ftp.file(file), sep = &quot;\\\\&quot;) # STORES FLOW FILE PATH, C:\\\\temp\\\\FloPctCtry-daily.csv 4.2.4 Return File The return file for this strategy should contain daily equity returns for each of the countries in the flow file, which the user can find with their own resources. EPFR also provides Fund Return data, that can be used as a proxy to returns. To create a return file using EPFR daily flow data, the following equation can be used: \\[\\text{Fund Return}_{c,t} = \\frac{\\sum^{N}_{i=m} \\text{Portfolio Change}_i}{\\sum^{N}_{i=m} \\text{Assets Start}_i}\\] Where: \\(\\text{Fund Return}\\) = the return value of country \\(c\\), across all funds \\(i\\), for day \\(t\\) For this demonstration, we will use a file that has calculated returns using EPFR daily flow data, which has been locally named ETFCountryReturns.csv. ret.file &lt;- &quot;ETFCountryReturns.csv&quot; For your reference a snippet of our return file looks like this AU BR CA CN ID IN JP KR MX MY PH RU SG TH TR TW ZA AR CL CO CZ EG HU IL NZ NO PE PL SE CH GB AT BE DK FI FR DE GR IE IT NL PT ES HK US PK AE QA SA KW 20220201 1.216153 0.9016166 1.848297 1.877648 0.8810507 1.840429 1.537664 1.303538 1.535172 0.7575718 0.9317495 1.236400 1.197279 1.047307 0.4112086 2.754831 1.917478 1.580909 0.7649221 0.8232780 1.260463 0.5450894 1.288094 2.012249 1.623388 1.585561 1.190278 0.9101336 2.341319 1.871180 1.660703 2.139739 1.332858 4.050880 2.673355 2.094102 1.905758 0.6483668 1.518307 2.464057 2.677256 0.8455714 1.642391 1.585187 3.162870 0.4981388 0.8767887 0.9909682 1.560791 1.528031 20220202 1.229971 0.8914860 1.854747 1.876020 0.8843670 1.852444 1.567557 1.304787 1.542828 0.7579900 0.9444344 1.235136 1.195559 1.047929 0.4067939 2.758704 1.918054 1.551835 0.7516109 0.8187220 1.277934 0.5488876 1.276596 2.015293 1.652679 1.595796 1.184149 0.9296423 2.359213 1.873940 1.672066 2.160430 1.338070 4.141353 2.672666 2.099197 1.905684 0.6551584 1.528388 2.481204 2.680701 0.8503853 1.643611 1.587420 3.190279 0.5038590 0.8798715 0.9955980 1.544955 1.527794 20220203 1.226963 0.8883007 1.833780 1.873542 0.8799717 1.826094 1.552677 1.316727 1.517052 0.7617148 0.9347483 1.206224 1.214456 1.048969 0.3961473 2.746480 1.914590 1.504623 0.7286515 0.8114083 1.292432 0.5449740 1.275142 1.961160 1.659353 1.583173 1.162599 0.9313575 2.310394 1.851140 1.659340 2.151387 1.320238 4.033247 2.629636 2.067067 1.877527 0.6513808 1.505205 2.454486 2.617539 0.8495833 1.642705 1.584409 3.108921 0.5044404 0.8757572 0.9996700 1.533813 1.528008 20220204 1.233514 0.8882288 1.845554 1.881782 0.8842343 1.824873 1.562143 1.336320 1.518061 0.7622830 0.9406746 1.218201 1.222897 1.056475 0.3914212 2.743207 1.916969 1.509815 0.7180452 0.8152001 1.284537 0.5453844 1.259993 1.978811 1.657073 1.591187 1.169147 0.9087460 2.284492 1.837019 1.655472 2.143534 1.304880 3.944003 2.595245 2.053071 1.847395 0.6503386 1.501491 2.411192 2.615541 0.8519894 1.630650 1.609301 3.125973 0.5079538 0.8767967 1.0008716 1.534457 1.529081 20220207 1.233101 0.8934258 1.844329 1.871690 0.8957612 1.802879 1.556472 1.321601 1.518591 0.7650501 0.9275738 1.219366 1.235957 1.060229 0.3999828 2.766496 1.925832 1.518986 0.7278336 0.8209700 1.290253 0.5437079 1.248669 1.983558 1.652063 1.608149 1.174699 0.9106971 2.302398 1.844615 1.667302 2.154655 1.311711 3.964043 2.634784 2.068715 1.858852 0.6465406 1.517363 2.379000 2.639204 0.8479773 1.619189 1.619199 3.114157 0.5073301 0.8790720 1.0012910 1.549670 1.532303 20220208 1.246383 0.8951421 1.855057 1.880200 0.8947920 1.809617 1.562096 1.321507 1.545723 0.7654877 0.9348395 1.257207 1.250049 1.067788 0.4053601 2.780996 1.943669 1.529488 0.7385582 0.8161895 1.306226 0.5437769 1.254819 1.992795 1.658260 1.587118 1.224245 0.9296387 2.295751 1.837115 1.667085 2.173732 1.318192 3.890220 2.629188 2.075322 1.863715 0.6521946 1.519889 2.388347 2.643522 0.8479773 1.641555 1.637959 3.142427 0.5085918 0.8845530 1.0013951 1.548731 1.541016 4.3 Strategy Implementation The final step is implementing this strategy to create a signal. Lets begin by reading in the flow and return files to our R studio work space. x &lt;- read.csv(flow.file, row.names = 1) # GET FLOW PERCENTAGE y &lt;- read.csv(ret.file, row.names = 1) # GET RETURN One of our first options is choosing the universe we want to use. EPFR has tested this signal within three different universes of countries ACWI (All Country World Index), EAFE (Europe, Australasia, and the Far East (EAFE), and EM (Emerging Markets). For this example, we choose ACWI, which includes 52 countries. idx &lt;- &quot;ACWI&quot; Then, to subset the flow file \\(x\\) to the selected universe \\(idx\\) the function Ctry.msci.members.rng() from the library('EPFR') is used. This function returns a list of two letter country codes from \\(idx\\) that are in \\(x\\). x &lt;- x[, is.element(dimnames(x)[[2]], Ctry.msci.members.rng(idx, dimnames(x)[[1]][1], dimnames(x)[[1]][dim(x)[1]]))] # SUBSET TO INDEX COUNTRIES We will also subset the return file \\(y\\) to use the same countries as \\(x\\). y &lt;- y[, dimnames(x)[[2]]] # TOTAL RETURN INDEX * Note: subsetting can be also be done when creating the flow and return files 4.3.1 Compounding Flows Next, we set up a variable for our look-back period, which can also be called a flow window. This variable will be the window of time we use to create a trailing compounded daily percentage flow. The look-back period we choose for our demonstrations is 20 days. lookback &lt;- 20 # FLOW WINDOW (IN WEEKDAYS) - 20 day look back period Again, using a function from the library('EPFR'), compound.flows() compounds the daily percentage flow over the trailing lookback period for each country. x &lt;- compound.flows(x, lookback, F) # COMPOUND FLOWS AU BR CA CN ID IN JP KR MX MY PH RU SG TH TR TW ZA AR CL CO CZ EG HU IL NZ NO PE PL SE CH GB AT BE DK FI FR DE GR IE IT NL PT ES HK US PK AE QA SA KW 20220201 1.3745739 0.1698093 2.0709179 0.2798596 0.4440739 0.4127714 1.1028471 0.6404943 0.1201757 0.4440048 0.5737908 0.4627318 0.7625579 0.3922823 0.2928791 0.4172441 0.7290657 1.6281100 0.5807690 0.7738465 0.6154518 0.6627127 0.9430395 0.7259949 0.9117943 2.0892210 -0.0188375 0.9721411 1.4758556 1.3722231 1.6426067 2.8840243 3.9757768 1.2018186 5.2413297 3.3503196 3.8138943 0.3227706 2.1346770 3.8677571 3.3989597 3.5235059 3.7467965 0.6582967 1.167308 -0.8835986 0.8670200 0.8592906 0.9288324 0.6013240 20220202 2.1658026 0.5649491 1.9191882 0.4056074 0.6907155 0.3280427 2.2471303 0.8392891 0.4931169 1.0143913 -0.1803346 0.4652878 1.2236408 0.4318273 -0.2353515 0.3705473 0.7590251 1.0633973 0.4494022 0.9835933 0.7238909 0.5376412 0.2676650 1.9274939 1.5784568 3.0063563 1.3098461 1.1564743 2.1696923 2.2272597 2.0639470 3.5670415 5.8872436 1.4591951 7.4271557 3.9940899 4.7258927 0.9261221 3.1624999 4.9657915 3.9814096 6.9053940 4.5868026 0.7923136 2.426589 -0.0543334 0.8746384 0.7355596 0.5614094 0.3596857 20220203 0.4667092 0.4664379 1.5340776 0.5808277 0.5491221 0.6929345 0.4385297 1.0424063 0.2005063 0.8431085 0.6857084 0.6375850 0.2856995 0.8173357 -0.8481448 0.9026743 1.0372360 -0.3091882 0.4056182 0.5990695 0.8581312 -0.2008043 0.0130265 0.4497235 1.2675911 1.1948062 0.9135136 0.7021061 0.6230123 0.8171096 1.7010403 1.1914877 1.2434544 0.9510664 1.6404071 0.8138249 0.8339502 0.7005049 0.9384187 1.3061704 0.7465761 1.6640789 1.5522009 0.5527984 1.818610 -0.6567920 1.0841626 1.0568420 0.9045782 0.5884164 20220204 0.8586920 0.0108617 0.3651346 0.5765709 1.4350977 0.8737266 0.7285640 0.9735987 -0.0605964 1.1607634 0.9610394 -2.7181648 0.3860712 0.6448299 -2.9779774 0.8461050 0.7231481 0.1194810 0.9505289 0.9191093 0.9705630 -1.0519922 -3.2163326 -0.1215539 0.3990930 0.6013104 -0.4488489 -2.1390233 0.3035487 0.3099034 0.7231470 0.5011693 0.3464952 -0.0703209 0.7243347 0.3767507 0.4211921 -0.6745845 0.0176745 0.3446079 0.2377254 0.1563783 0.7619407 -0.2010068 1.303180 0.2423150 0.4917467 0.7793950 0.1960282 0.5889650 20220207 0.8865824 1.3374708 0.7541617 1.6500052 1.2087114 1.2602932 1.0262085 1.4335837 1.2876403 2.4451577 1.4190320 -0.1400389 0.7799376 2.4553569 -0.6998447 1.3770336 3.1050299 0.4055433 1.3358945 0.7576325 1.2243814 0.7246025 -0.1883114 0.7785051 0.7338660 1.5353360 0.5330373 -0.4855565 0.2694757 0.2126247 0.8796015 0.6489660 0.8089269 -0.2568446 1.1163227 0.3124594 0.7097380 0.2785634 0.4026259 0.6429314 -0.0646131 0.4639872 0.6645744 1.3739815 0.337728 3.2624246 2.0167118 2.9178413 0.7460351 0.5344499 20220208 1.5223032 2.8271682 1.1012240 0.7323499 1.8609299 1.8087005 1.3437384 1.3858505 2.3872503 2.5047334 1.5745229 -1.0201689 1.3555346 2.2171369 -1.5859842 1.8129213 2.3520941 0.6278959 1.8366586 0.8691589 1.3143535 2.0509329 -3.1918798 1.1131187 1.2158760 0.9934858 3.9010377 -1.6305468 0.4447873 0.5575871 0.5758132 0.9785246 1.0431279 -0.2388666 1.1629257 0.7880438 0.6654131 -0.7909778 0.1011086 1.2015997 0.3897703 0.5422486 0.9612847 -0.8873387 1.127884 -0.0255065 2.0959074 2.3522366 2.0931014 1.7150480 4.3.2 Ranking Countries Next, we sort the countries in each universe into five equal bins based on their 20-day Percentage Flow Compounded value for the selected holding period. To do this, we will use the function from library('EPFR'), called bbk(). This function will output a standardized backtest result. Th bbk() function requires our compounded daily percentage flow file, a return file, and our selected universe. Please refer to the library documentation for the complete list of parameters of this function. The first parameter we add is the number of bins we want to use. For our case, we want to use 5 because our strategy is to go long the top fifth and short the bottom fifth. nBin &lt;- 5 # NUMBER OF BINS Since EPFR data is published with T+1 day lag and is released around 5:00 pm EST, we account for a T+2 day delay in our model since that is when one can trade on the information. Users interested in more timely signals can also use the T+2 Open Prices for backtesting purposes. EPFR also offers a Premium Daily offering, an earlier release of the end-of-day data covering a significant subset of fund-level flow information. delay &lt;- 2 # DELAY IN KNOWING DATA (IN WEEKDAYS) - data takes time to have It is also important to note that this model will need to be re-balanced weekly. The day of the week the rebalancing occurs is at the discretion of the user. For this example we will set the day of the week to trade as Friday. doW &lt;- 5 # DAY OF THE WEEK YOU WILL TRADE ON (5 = FRIDAYS) Additionally, we also evaluate the returns for different holding periods. The user can input return horizions that they are interested in here. For this example we define a return horizon for weekly, fortnightly, monthly, bi-monthly, quarterly, and semi-annually. hz &lt;- c(5, 10, 20, 45, 65, 130) # RETURN HORIZON (IN WEEKDAYS) - holding periods Now that we have defined all of our inputs, to rank the countries into quintiles by their 20-day percentage flow, we call function bbk() for a 1-week holding period. z &lt;- bbk(x, y, 1, hz[1], nBin, doW, T, 0, delay, idx) 4.3.3 Model Twenty-day flow percentage ranked into quintiles (computed only where forward returns are available) z[[&quot;bins&quot;]] AU BR CA CN ID IN JP KR MX MY PH RU SG TH TR TW ZA AR CL CO CZ EG HU IL NZ NO PE PL SE CH GB AT BE DK FI FR DE GR IE IT NL PT ES HK US PK AE QA SA KW 20220225 1 1 1 1 3 3 2 2 1 2 3 1 3 1 5 2 2 NA 3 3 4 5 1 3 2 4 2 2 3 4 3 4 4 5 4 4 4 2 5 5 5 4 5 1 1 NA 5 5 3 5 20220218 4 1 5 2 1 4 3 5 1 2 5 2 2 3 5 3 4 NA 1 2 1 5 1 4 5 1 1 2 5 4 2 5 3 5 3 2 3 3 4 1 4 4 2 1 5 NA 3 3 3 4 20220211 3 3 2 4 5 5 4 5 4 1 4 5 5 4 3 4 2 NA 1 3 2 4 5 5 5 1 5 5 2 2 1 3 1 3 1 3 2 3 4 2 4 2 1 3 3 NA 1 1 2 1 20220204 2 4 2 5 4 5 2 3 4 3 5 5 3 5 5 5 4 NA 5 3 4 4 5 2 3 2 3 3 2 2 2 1 1 3 1 1 1 3 1 1 1 1 1 4 2 NA 3 4 4 5 Quintile Returns over the equal-weight universe z[[&quot;rets&quot;]] Q1 Q2 Q3 Q4 Q5 TxB uRet 20220225 -3.8074779 2.9433733 2.9743461 -3.6265012 1.4479469 -5.2554248 -4.6152826 20220218 -0.1987113 -2.9723116 1.0994911 1.3444021 0.5643387 -0.7630500 -2.7415387 20220211 0.3127637 -0.3832483 -0.3584539 0.2750265 0.1430898 0.1696739 -0.9261476 20220204 -0.4101753 -0.5716855 0.3224336 0.2435449 0.3830683 -0.7932436 1.3032221 4.3.4 Performance Performance over all holding periods fcn &lt;- function(retW) {as.matrix(bbk(x, y, 1, retW, 5, doW, T, 0, delay, idx)$summ)} # DEFINE SUMMARY FUNCTION mat.ex.array3d(sapply(split(hz, hz), fcn, simplify = &quot;array&quot;)) # WRITE SUMMARIES Q1 Q2 Q3 Q4 Q5 TxB uRet Bi-Monthly AnnMn -1.359419e+00 -1.200041e+00 9.810921e-01 1.138329e+00 5.600293e-01 -1.919448e+00 5.121694e+00 AnnSd 5.363277e+00 4.561464e+00 4.679822e+00 5.194904e+00 5.826330e+00 9.729453e+00 1.590478e+01 Sharpe -2.536235e+01 -2.562839e+01 2.072012e+01 2.159664e+01 1.080984e+01 -2.005678e+01 3.236592e+01 HitRate -6.410256e+00 -6.980057e+00 3.276353e+00 4.131054e+00 6.695157e+00 -6.410256e+00 1.239316e+01 Beta -6.997780e-02 -3.748720e-02 9.633100e-03 1.115320e-02 8.737360e-02 -1.573514e-01 1.000000e+00 Alpha -1.014236e+00 -1.010299e+00 9.199667e-01 1.090005e+00 1.300809e-01 -1.144316e+00 0.000000e+00 DrawDn -2.217271e+01 -1.764852e+01 -9.209189e+00 -9.843321e+00 -1.344598e+01 -3.909681e+01 -2.647945e+01 DDnBeg 2.015844e+07 2.016195e+07 2.017180e+07 2.017512e+07 2.018722e+07 2.015631e+07 2.018901e+07 DDnN 2.344444e+01 2.277778e+01 9.555556e+00 1.200000e+01 9.444444e+00 2.922222e+01 7.777778e+00 AnnTo 4.260997e+02 4.526017e+02 4.635711e+02 4.531321e+02 4.183813e+02 8.444810e+02 0.000000e+00 Fortnightly AnnMn -1.594095e+00 -1.722337e+00 9.455191e-01 -1.981436e-01 2.553882e+00 -4.147978e+00 4.600071e+00 AnnSd 5.548528e+00 5.575056e+00 5.221758e+00 4.755291e+00 6.061398e+00 9.716132e+00 1.544202e+01 Sharpe -2.691700e+01 -2.688171e+01 1.907280e+01 -6.462379e+00 4.117461e+01 -4.088036e+01 2.977771e+01 HitRate -3.072626e+00 -1.396648e+00 3.910614e+00 -2.793296e-01 4.469274e+00 -4.189944e+00 7.541899e+00 Beta -3.022910e-02 -5.002290e-02 -1.196740e-02 -5.605300e-03 9.974920e-02 -1.299783e-01 1.000000e+00 Alpha -1.454824e+00 -1.487861e+00 1.012512e+00 -1.721106e-01 2.078459e+00 -3.533283e+00 0.000000e+00 DrawDn -2.290282e+01 -2.813970e+01 -1.188070e+01 -1.722588e+01 -1.184712e+01 -5.011044e+01 -3.471675e+01 DDnBeg 2.017591e+07 2.015561e+07 2.016556e+07 2.019062e+07 2.015052e+07 2.018058e+07 2.019012e+07 DDnN 9.200000e+01 1.180000e+02 7.850000e+01 5.000000e+01 8.000000e+01 9.850000e+01 3.050000e+01 AnnTo 1.799100e+03 1.969044e+03 2.088735e+03 1.960248e+03 1.769727e+03 3.568827e+03 0.000000e+00 Monthly AnnMn -1.642852e+00 -2.379442e+00 1.054973e+00 1.005128e+00 1.992229e+00 -3.635081e+00 4.665762e+00 AnnSd 5.722100e+00 5.070448e+00 4.786104e+00 5.090070e+00 5.612247e+00 9.430070e+00 1.571243e+01 Sharpe -2.889227e+01 -4.487361e+01 2.267691e+01 1.698998e+01 3.562111e+01 -3.801441e+01 2.988173e+01 HitRate -4.494382e+00 -2.528090e+00 3.932584e+00 1.404494e+00 3.932584e+00 -5.617978e+00 8.707865e+00 Beta -3.499800e-02 -3.088010e-02 -1.471820e-02 -6.717700e-03 8.591090e-02 -1.209089e-01 1.000000e+00 Alpha -1.490871e+00 -2.213243e+00 1.126259e+00 1.024974e+00 1.589400e+00 -3.080271e+00 0.000000e+00 DrawDn -2.144950e+01 -2.408110e+01 -1.004656e+01 -1.329078e+01 -1.029527e+01 -4.554308e+01 -3.115392e+01 DDnBeg 2.015566e+07 2.015584e+07 2.017552e+07 2.018559e+07 2.017302e+07 2.015791e+07 2.019014e+07 DDnN 8.075000e+01 6.700000e+01 1.350000e+01 2.475000e+01 1.700000e+01 6.025000e+01 1.525000e+01 AnnTo 9.186017e+02 9.991417e+02 1.039645e+03 1.003280e+03 9.226186e+02 1.841220e+03 0.000000e+00 Quarterly AnnMn -1.082063e+00 -1.204928e+00 5.698990e-01 9.099097e-01 8.957379e-01 -1.977801e+00 5.377233e+00 AnnSd 5.118570e+00 4.644309e+00 4.635246e+00 4.764066e+00 5.826584e+00 9.358104e+00 1.548786e+01 Sharpe -2.103167e+01 -2.614450e+01 1.336660e+01 2.307477e+01 1.535224e+01 -2.049509e+01 3.496609e+01 HitRate -1.906640e+00 -4.240631e+00 9.752356e-01 3.396888e+00 5.960991e+00 -6.223975e+00 1.456279e+01 Beta -9.559700e-02 -2.351600e-02 7.204500e-03 3.485480e-02 7.796950e-02 -1.735665e-01 1.000000e+00 Alpha -5.844420e-01 -1.081163e+00 5.114172e-01 7.507439e-01 4.854999e-01 -1.069942e+00 0.000000e+00 DrawDn -1.936904e+01 -1.584372e+01 -1.073019e+01 -9.863004e+00 -1.155713e+01 -3.574441e+01 -2.365275e+01 DDnBeg 2.015911e+07 2.015928e+07 2.016374e+07 2.016912e+07 2.019045e+07 2.015610e+07 2.018586e+07 DDnN 1.515385e+01 1.700000e+01 1.138462e+01 9.692308e+00 8.000000e+00 1.676923e+01 3.076923e+00 AnnTo 3.030545e+02 3.190947e+02 3.221078e+02 3.127066e+02 3.021122e+02 6.051667e+02 0.000000e+00 Semi-Annual AnnMn -7.395434e-01 -7.564661e-01 5.687789e-01 2.985258e-01 6.974959e-01 -1.437039e+00 6.217397e+00 AnnSd 4.666853e+00 4.515898e+00 4.467610e+00 4.317036e+00 5.240529e+00 8.410533e+00 1.434628e+01 Sharpe -1.913096e+01 -1.599572e+01 1.229792e+01 8.349892e+00 1.224202e+01 -1.830909e+01 4.427210e+01 HitRate -6.089744e+00 -3.229783e+00 2.712032e+00 3.205128e-01 3.229783e+00 -4.191321e+00 1.918146e+01 Beta -6.903660e-02 -5.552530e-02 7.710000e-05 5.746350e-02 6.681950e-02 -1.358561e-01 1.000000e+00 Alpha -3.843491e-01 -4.424020e-01 6.081001e-01 -2.770900e-02 3.204350e-01 -7.047841e-01 0.000000e+00 DrawDn -1.503742e+01 -1.263258e+01 -9.182900e+00 -9.778959e+00 -1.094136e+01 -2.489010e+01 -1.752810e+01 DDnBeg 2.016265e+07 2.016462e+07 2.017176e+07 2.017380e+07 2.017445e+07 2.015813e+07 2.017642e+07 DDnN 6.692308e+00 6.230769e+00 4.576923e+00 4.730769e+00 4.807692e+00 7.461538e+00 2.307692e+00 AnnTo 1.542204e+02 1.624956e+02 1.640224e+02 1.627208e+02 1.607292e+02 3.149496e+02 0.000000e+00 Weekly AnnMn -2.240782e+00 -1.986659e+00 1.664271e+00 9.919638e-01 1.728825e+00 -3.969607e+00 4.584185e+00 AnnSd 5.734055e+00 5.114462e+00 5.761756e+00 5.066544e+00 6.061515e+00 9.951593e+00 1.482577e+01 Sharpe -3.907849e+01 -3.884395e+01 2.888479e+01 1.957871e+01 2.852133e+01 -3.988916e+01 3.092039e+01 HitRate 2.367688e+00 -1.253482e+00 1.810585e+00 3.481894e+00 3.760446e+00 9.749304e-01 5.710306e+00 Beta 3.744320e-02 -7.129520e-02 -2.741120e-02 1.818200e-02 4.266380e-02 -5.220600e-03 1.000000e+00 Alpha -2.412429e+00 -1.659829e+00 1.789929e+00 9.086142e-01 1.533246e+00 -3.945675e+00 0.000000e+00 DrawDn -3.146353e+01 -1.987673e+01 -1.399689e+01 -2.035128e+01 -1.734149e+01 -6.021224e+01 -3.837292e+01 DDnBeg 2.017090e+07 2.015082e+07 2.018033e+07 2.019082e+07 2.015052e+07 2.017112e+07 2.018013e+07 DDnN 2.370000e+02 3.400000e+02 6.800000e+01 6.700000e+01 1.320000e+02 2.250000e+02 1.120000e+02 AnnTo 3.493705e+03 3.909415e+03 4.152999e+03 3.834417e+03 3.491613e+03 6.985317e+03 0.000000e+00 Annualized mean one-week returns bbk(x, y, 1, hz[1], 5, doW, T, 0, delay)$annSumm # DISPLAY CALENDAR-YEAR RETURNS Q1 Q2 Q3 Q4 Q5 TxB uRet nPrds 2015 14.8371796 2.3457191 5.599829 -8.697116 -13.456667 28.293847 -25.043977 32 2016 0.0572224 -4.4710365 -1.512900 3.347425 2.466928 -2.409705 9.403868 53 2017 1.2817207 1.4315885 -2.409724 4.560159 -4.507233 5.788954 18.308649 52 2018 -5.7486533 -1.4605329 -2.560862 3.161225 6.586449 -12.335102 -12.123279 52 2019 -7.0731274 -0.5361163 -5.556690 3.127557 9.367909 -16.441036 16.383026 52 2020 -4.3998018 6.1541541 1.874302 -14.814486 11.185832 -15.585633 4.955824 52 2021 -7.2500090 -4.2353023 6.201192 8.787460 -3.503341 -3.746668 12.727776 53 2022 -31.1792803 -9.6182339 5.595014 -0.358124 35.560624 -66.739904 -6.838586 13 "],["multi-asset-strategy.html", "5 Multi-Asset Strategy 5.1 Overview 5.2 Daily Percentage Flow 5.3 Strategy Implementation", " 5 Multi-Asset Strategy 5.1 Overview This is a Multi-Asset Strategy, where we are essentially rotating between asset classes within the equity and bond universes. This approach uses active equity and fixed income funds to calculate percentage flow into asset classes. In terms of twenty-day percentage flows, the top fifth of asset classes outperform the bottom fifth by 10% per year. The strategy works well whether you consider only equity or fixed income asset classes. 5.2 Daily Percentage Flow The Multi-Asset Strategy developed by EPFR Global is based on percentage flow into asset classes. In this section, the reader will gain an understanding of the aggregations which can be used to create a signal as well as the methodology behind daily percentage flow calculations. 5.2.1 Aggregations The first step is defining a subset of data to capture in calculating our signal. For this strategy we can include equity, fixed-income, or both types of asset classes. Although, we will limit ourselves to actively managed funds when compiling the raw equity data. Equity and Fixed income (i.e. Multi-Asset) funds, which report their daily flows, are only a subset of those that report their fund flows to EPFR. The figure below shows EPFRs coverage of these universes over time compared to our total coverage. Updated at the end of July each year Users looking for more specific detail can customize this aggregation even further using EPFRs fund-level or share class-level granularity. Some good examples would be Active/Passive, ETF or Mutual funds, Institutional or Retail. Users can use these tags to different degrees in creating aggregated signals to backtest. Further detail about this is available in section 3. This can be achieved using fund-level flow files or reaching out to EPFRs quant team for customized aggregations. 5.2.2 Calculation To begin calculating the Daily Percentage flow, we start with our subset of Multi-Asset funds. To calculate the flow into an asset class, we sum the flows into funds that invest in that asset class. We repeat the process across the same funds Assets held under Management (AuM), to get the total AuM held in an asset class. Finally, to find the daily percentage flow for an asset class, we divide the flow into by the assets held. Then we repeat this across all different asset classes for the entire history. \\[\\text{Percentage Flow}_{c,t} = \\frac{\\sum^{N}_{i=m} \\text{Flow}_{i}}{\\sum^{N}_{i=m}{\\text{AuM}_{i}}}\\] Where: \\(\\text{Percentage Flow}\\) = the scaled flow as a percentage into an asset class \\(c\\), across all funds \\(i\\), for day \\(t\\) 5.2.3 Flow File The users may create flow percentages for their desired Equity and Fixed Income (Multi-Asset) aggregations and granularity using the methodology described in the previous section. EPFR also provides a pre-calculated aggregations for its users for the Multi-Asset Strategy. These files can be found on the FTP under the strategies folder. Please refer to the FTP Folder Structure section for the exact location of this file. These files contains daily flow data for asset classes listed below and are both updated daily at 5:00 PM est. with a T+1 day lag. Asset Classes 7 Global Equity Regions: Asia ex Japan Europe ex UK Japan Latin America Pacific ex Japan United Kingdom United States 10 Fixed Income: Global Emerging Markets Western Europe Bond High Yield Bond Floating Rate Funds USA Treasuries - USA Treasuries - Long USA Treasuries - Short Cash USA Munis Global Fixed Income For this demonstration, we use the pre-calculated files MultiAsset-Rgn-daily.csv and MultiAsset-FI-daily.csv. Below shows a snippet of what these files contain. AsiaXJP EurXGB Japan LatAm PacXJP UK USA 20211201 -0.065787 -0.057720 0.045671 -0.130202 -0.092976 -0.025578 -0.014164 20211202 -0.005170 -0.048366 0.065743 -0.371025 -0.010026 -0.015544 -0.112020 20211203 -0.066599 -0.097014 -0.058116 -0.032491 -0.022317 -0.032831 -0.039998 20211206 -0.038543 -0.127436 -0.002605 -0.101188 1.083445 -0.007502 0.044352 20211207 -0.097312 0.010563 0.003289 0.012547 0.004478 -0.015479 -0.251809 20211208 -0.007509 0.014343 0.040831 0.137045 -0.000494 -0.089466 0.120754 GLOBEM WESEUR HYIELD FLOATS USTRIN USTRLT USTRST CASH USMUNI GLOFIX 20211201 -0.028088 0.006219 -0.106159 -0.074881 0.252969 0.883080 0.416743 0.002679 0.024716 -0.051465 20211202 -0.014515 -0.035552 -0.233503 -0.176588 -0.034228 2.224331 0.482904 0.268642 0.040513 0.027430 20211203 0.025867 0.014347 -0.259077 0.187543 -0.277126 1.117413 0.156570 -0.159001 0.019765 -0.014492 20211206 -0.029981 -0.056445 0.196371 0.234828 0.221533 1.059680 0.147758 0.268698 0.048877 0.000639 20211207 -0.152535 -0.024498 0.233409 0.122840 0.048355 1.120573 -0.144327 -0.058648 0.039898 -0.030768 20211208 -0.027842 -0.045515 0.122184 0.121195 0.073612 -0.434690 -0.218566 0.247836 0.021011 -0.043152 We will download these files from the ftp using ftp.get(), more about this function can be referred to in section 2.2. file.Rgn &lt;- &quot;EPFRHistory/Strategies/daily/MultiAsset-Rgn-daily.csv&quot; # PATH TO .csv FILE file.FI &lt;- &quot;EPFRHistory/Strategies/daily/MultiAsset-FI-daily.csv&quot; # PATH TO .csv FILE fldr &lt;- &quot;C:\\\\temp&quot; # LOCAL FOLDER ftp.get(file.Rgn, fldr, &quot;filetransport.epfrglobal.com&quot;, w = &quot;username&quot;, h = &quot;password&quot;, &quot;ftp&quot;) ftp.get(file.FI, fldr, &quot;filetransport.epfrglobal.com&quot;, w = &quot;username&quot;, h = &quot;password&quot;, &quot;ftp&quot;) # DOWNLOADS FILE FROM FTP TO LOCAL FOLDER, USING CREDENTIALS After downloading the csv files you will store both of the paths together as flow.file. A quick way to do this is shown below: flow.file.Rgn &lt;- paste(fldr, ftp.file(file.Rgn), sep = &quot;\\\\&quot;) # STORES FLOW FILE PATH, C:\\\\temp\\\\MultiAsset-Rgn-daily.csv flow.file.FI &lt;- paste(fldr, ftp.file(file.FI), sep = &quot;\\\\&quot;) # STORES FLOW FILE PATH, C:\\\\temp\\\\MultiAsset-FI-daily.csv flow.file &lt;- c(flow.file.Rgn, flow.file.FI) 5.2.4 Return File The return file for this strategy should contain daily returns for each of the asset classes in the flow file, which the user can find with their own resources. EPFR also provides Fund Return data, that can be used as a proxy to returns. To create a return file using EPFR daily flow data, the following equation can be used: \\[\\text{Fund Return}_{c,t} = \\frac{\\sum^{N}_{i=m} \\text{Portfolio Change}_i}{\\sum^{N}_{i=m} \\text{Assets Start}_i}\\] Where: \\(\\text{Fund Return}\\) = the return value of an asset class \\(c\\), across all funds \\(i\\), for day \\(t\\) For this demonstration, we will use files that have calculated returns using EPFR daily flow data, which has been locally named PsuedoReturns-Rgn.csv and PsuedoReturns-FI.csv. ret.file.Rgn &lt;- &quot;PsuedoReturns-Rgn.csv&quot; ret.file.FI &lt;- &quot;PsuedoReturns-FI.csv&quot; For your reference a snippet of our return file looks like this AsiaXJP EurXGB Japan LatAm PacXJP UK USA GLOBEM WESEUR HYIELD FLOATS USTRIN USTRLT USTRST CASH USMUNI GLOFIX 20211201 214.1131 161.9943 119.2173 78.83982 154.0745 177.0324 291.9835 135.8781 141.4412 146.3335 114.4219 141.0385 212.2570 123.5804 102.3682 143.3444 149.7536 20211202 214.8790 160.6190 118.3444 79.37666 153.5210 176.2673 296.3693 136.1899 141.6530 146.4360 114.4118 140.7892 212.2643 123.4992 102.3683 143.3476 149.8067 20211203 213.7301 160.1943 120.0065 80.18004 153.5826 177.0106 293.1333 136.4219 141.7254 146.6076 114.4840 141.2850 214.3524 123.5313 102.3681 143.3861 150.0184 20211206 211.6420 160.0753 119.2455 80.47108 152.9334 177.3153 296.2200 136.5582 141.8860 146.9627 114.5514 140.8142 212.2902 123.4913 102.3681 143.3881 150.1093 20211207 215.1935 163.9383 121.5673 81.73758 154.7535 180.1470 302.6847 137.0147 141.9751 147.6908 114.6925 140.4383 210.9993 123.4109 102.3676 143.3552 150.2401 20211208 216.7263 164.5640 122.5717 83.11249 156.2248 180.8519 304.2680 137.2775 141.8604 147.6839 114.7470 140.0966 208.6260 123.4210 102.3680 143.3227 150.1685 5.3 Strategy Implementation The final step is implementing this strategy to create a signal. Lets begin by reading in the flow and return files to our R studio work space. x.rgn &lt;- read.csv(flow.file[1], row.names = 1) x.FI &lt;- read.csv(flow.file[2], row.names = 1) The next step is to ensure both of our flow files have the same rows so that we can combine the two files, like we do below. x.rgn &lt;- x.rgn[is.element(dimnames(x.rgn)[[1]], dimnames(x.FI)[[1]]), ] # ENSURES RGN MATCHES FI ROWS x.FI &lt;- x.FI[is.element(dimnames(x.FI)[[1]], dimnames(x.rgn)[[1]]), ] # ENSURES FI MATCHES RGN ROWS x &lt;- cbind(x.rgn, x.FI) # COMBINES RGN AND FI DATA One of the first options we have is choosing the universe we want to use. EPFR has tested this signal within two different universes of asset classes Rgn (7 Region Equity) and F.I. (Fixed Income). For this example, we choose Multi, which includes both of our equity and fixed income asset classes. idx &lt;- &quot;Multi&quot; # Multi/Rgn/FI 5.3.1 Compounding Flows Next, we set up a variable for our look-back period, which can also be called a flow window. This variable will be the window of time we use to create a trailing compounded daily percentage flow. The look-back period we choose for our demonstrations is 20 days. lookback &lt;- 20 # FLOW WINDOW (IN WEEKDAYS) - 20 day look back period Using a function from the library('EPFR'), compound.flows() compounds the daily percentage flow over the trailing lookback period for each country. x &lt;- compound.flows(x, lookback, F) # COMPOUND FLOWS AsiaXJP EurXGB Japan LatAm PacXJP UK USA GLOBEM WESEUR HYIELD FLOATS USTRIN USTRLT USTRST CASH USMUNI GLOFIX 20211201 -1.3075493 -1.1480918 0.9173940 -2.5720804 -1.8431866 -0.5103189 -0.2828991 -0.5602635 0.1244535 -2.101903 -1.487014 5.1828328 19.224815 8.673241 0.0535936 0.4954824 -1.0242831 20211202 -0.1033492 -0.9628883 1.3231046 -7.1646787 -0.2003291 -0.3104214 -2.2167174 -0.2899000 -0.7086436 -4.567902 -3.473135 -0.6823386 55.269281 10.114258 5.5121958 0.8133861 0.5500319 20211203 -1.3235863 -1.9225014 -1.1559251 -0.6478181 -0.4453950 -0.6545761 -0.7969276 0.5186133 0.2873314 -5.055971 3.818446 -5.3990002 24.887508 3.178417 -3.1324407 0.3960431 -0.2894413 20211206 -0.7680439 -2.5180988 -0.0520871 -2.0044235 24.0511206 -0.1499331 0.8907875 -0.5979152 -1.1228670 4.001557 4.802825 4.5251572 23.469126 2.997012 5.5133744 0.9820924 0.0127808 20211207 -1.9283523 0.2114721 0.0658006 0.2512393 0.0895981 -0.3091252 -4.9175061 -3.0068948 -0.4888214 4.773156 2.485683 0.9715555 24.965588 -2.847303 -1.1664477 0.8009918 -0.6135646 20211208 -0.1500729 0.2872512 0.8197954 2.7768797 -0.0098795 -1.7741934 2.4429867 -0.5553696 -0.9063747 2.472254 2.452012 1.4825812 -8.343978 -4.281734 5.0751769 0.4210598 -0.8595112 5.3.2 Return file We will then import our two total return files and modify them to be one data frame of total index returns indexed so that time moves forward. To do this we will use function ret.to.idx() from library('EPFR') which will translate these returns to a total return index. We also use the functions map.rname() to ensure the row names of the matrices line up with our flow file and ret.idx.gaps.fix() to replace any NA values. #RGN RETURNS y &lt;- read.csv(ret.file.Rgn, row.names = 1) y &lt;- ret.to.idx(map.rname(y, dimnames(x)[[1]])) # CONVERT TO A TOTAL-RETURN INDEX y &lt;- ret.idx.gaps.fix(y) #F.I. RETURNS z &lt;- read.csv(ret.file.FI, row.names = 1) z &lt;- ret.to.idx(map.rname(z, dimnames(y)[[1]])) # CONVERT TO A TOTAL-RETURN INDEX #COMBINE RETURN FILES y &lt;- data.frame(y, z)[, dimnames(x)[[2]]] # FINAL TOTAL-RETURN INDEX TABLE y &lt;- y[max(simplify2array(lapply(y, function(x) {find.data(!is.na(x), T)}))):min(simplify2array(lapply(y, function(x) {find.data(!is.na(x), F)}))), ] # ENSURE ALL PIECES HAVE RETURN OVER THE SAME HORIZON Then, to subset the flow file \\(x\\) and return file \\(y\\) to the selected universe \\(idx\\) of asset classes, the function the following code is used. if (idx == &quot;Rgn&quot;) { x &lt;- x[, 1:7] y &lt;- y[, 1:7] } else if (idx == &quot;FI&quot;) { x &lt;- x[, 8:dim(x)[2]] y &lt;- y[, 8:dim(y)[2]] } else { z &lt;- map.rname(portfolio.beta.wrapper(y, &quot;ACWorld&quot;, lookback), dimnames(x)[[1]]) for (j in 1:dim(x)[1]) x[j, ] &lt;- portfolio.residual(unlist(x[j, ]), unlist(z[j, ])) } * Note: subsetting can be also be done when creating the flow and return files 5.3.3 Ranking Asset Classes Next, we sort the countries in each universe into five equal bins based on their 20-day Percentage Flow Compounded value for the selected holding period. To do this, we will use the function from library('EPFR'), called bbk(). This function will output a standardized backtest result. Th bbk() function requires our compounded daily percentage flow file, a return file, and our selected universe. Please refer to the library documentation for the complete list of parameters of this function. The first parameter we add is the number of bins we want to use. For our case, we want to use 5 because our strategy is to go long the top fifth and short the bottom fifth. nBin &lt;- 5 # NUMBER OF BINS Since EPFR data is published with T+1 day lag and is released around 5:00 pm EST, we account for a T+2 day delay in our model since that is when one can trade on the information. Users interested in more timely signals can also use the T+2 Open Prices for backtesting purposes. EPFR also offers a Premium Daily offering, an earlier release of the end-of-day data covering a significant subset of fund-level flow information. delay &lt;- 2 # DELAY IN KNOWING DATA (IN WEEKDAYS) - data takes time to have It is also important to note that this model will need to be re-balanced weekly. The day of the week the rebalancing occurs is at the discretion of the user. For this example we will set the day of the week to trade as Friday. doW &lt;- 5 # DAY OF THE WEEK YOU WILL TRADE ON (5 = FRIDAYS) Additionally, we also evaluate the returns for different holding periods. The user can input return horizions that they are interested in here. For this example we define a return horizon for weekly, fortnightly, monthly, bi-monthly, quarterly, and semi-annually. hz &lt;- c(5, 10, 20, 45, 65, 130) # RETURN HORIZON (IN WEEKDAYS) - holding periods Now that we have defined all of our inputs, to rank the countries into quintiles by their 20-day percentage flow, we call function bbk() for a 1-week holding period. z &lt;- bbk(x, y, 1, hz[1], nBin, doW, T, 0, delay) 5.3.4 Model Twenty-day flow percentage ranked into quintiles (computed only where forward returns are available) z[[&quot;bins&quot;]] AsiaXJP EurXGB Japan LatAm PacXJP UK USA GLOBEM WESEUR HYIELD FLOATS USTRIN USTRLT USTRST CASH USMUNI GLOFIX 20211231 2 3 3 4 2 3 2 5 4 1 2 1 5 1 5 4 4 20211224 3 2 4 3 4 2 2 4 4 5 1 1 1 2 5 3 5 20211217 3 2 2 5 3 3 1 4 2 1 5 4 5 1 4 2 4 20211210 4 4 2 2 4 5 4 3 3 2 1 1 5 5 1 2 3 20211203 2 3 2 3 3 2 1 4 4 5 5 2 1 1 4 4 5 Quintile Returns over the equal-weight universe z[[&quot;rets&quot;]] Q1 Q2 Q3 Q4 Q5 TxB uRet 20211231 0.4508185 -0.0883003 -0.1115199 0.0043988 -0.2274300 0.6782485 -1.2013195 20211224 -0.4624010 0.1908111 0.7238764 -0.1168909 -0.3600357 -0.1023653 0.4471162 20211217 0.6635756 -0.0550835 0.8090748 -0.4068340 -0.8567604 1.5203360 0.2635537 20211210 0.6363075 0.0257100 0.3914640 -1.1669284 0.4938530 0.1424546 -0.5107398 20211203 -0.5400268 0.0838721 1.5008910 -0.5256204 -0.3718665 -0.1681602 0.7003021 5.3.5 Performance Performance over all holding periods fcn &lt;- function(retW) {as.matrix(bbk(x, y, 1, retW, 5, doW, T, 0, delay)$summ)} # DEFINE SUMMARY FUNCTION mat.ex.array3d(sapply(split(hz, hz), fcn, simplify = &quot;array&quot;)) # WRITE SUMMARIES Q1 Q2 Q3 Q4 Q5 TxB uRet Bi-Monthly AnnMn 4.934705e-01 9.371790e-02 5.491154e-01 -5.653198e-01 -4.137834e-01 9.072539e-01 3.414070e+00 AnnSd 6.038767e+00 5.483679e+00 5.432645e+00 5.158366e+00 5.691456e+00 8.329876e+00 9.178851e+00 Sharpe 7.627058e+00 9.114961e-01 1.218932e+01 -8.857571e+00 -7.661794e+00 1.108401e+01 3.734956e+01 HitRate -3.280423e+00 4.061625e-01 2.220666e+00 -3.804855e+00 -7.085279e+00 2.888266e+00 1.509804e+01 Beta -2.407894e-01 1.617299e-01 1.155227e-01 7.913080e-02 -1.958810e-01 -4.490840e-02 1.000000e+00 Alpha 1.321712e+00 -4.485749e-01 1.605881e-01 -8.478605e-01 2.462806e-01 1.075431e+00 0.000000e+00 DrawDn -2.379111e+01 -1.999374e+01 -1.951135e+01 -2.764960e+01 -2.243145e+01 -3.053523e+01 -3.101945e+01 DDnBeg 2.011626e+07 2.011611e+07 2.010418e+07 2.007845e+07 2.009500e+07 2.011724e+07 2.007096e+07 DDnN 4.022222e+01 3.588889e+01 1.866667e+01 3.744444e+01 3.900000e+01 4.311111e+01 7.666667e+00 AnnTo 4.148592e+02 4.156864e+02 4.614113e+02 4.158705e+02 4.263875e+02 8.412467e+02 0.000000e+00 Fortnightly AnnMn 5.141872e-01 3.998400e-01 2.951020e-02 -7.768919e-01 -4.096160e-02 5.551488e-01 3.426943e+00 AnnSd 6.078440e+00 5.198346e+00 5.489896e+00 4.944432e+00 5.623593e+00 8.561354e+00 8.320958e+00 Sharpe 8.721543e+00 7.663163e+00 5.489311e-01 -1.554001e+01 -9.283209e-01 6.601432e+00 4.119830e+01 HitRate -9.186352e-01 2.099737e+00 2.099737e+00 -2.230971e+00 -1.443570e+00 1.706037e+00 1.233596e+01 Beta -2.013120e-01 2.049004e-01 2.327309e-01 -1.865370e-02 -2.797479e-01 7.843590e-02 1.000000e+00 Alpha 1.192476e+00 -3.003186e-01 -7.693437e-01 -7.117015e-01 9.262279e-01 2.662479e-01 0.000000e+00 DrawDn -2.413886e+01 -1.591318e+01 -2.563660e+01 -2.554373e+01 -2.250888e+01 -3.576139e+01 -3.576917e+01 DDnBeg 2.012061e+07 2.014572e+07 2.007542e+07 2.007087e+07 2.009036e+07 2.011052e+07 2.007106e+07 DDnN 1.915000e+02 1.050000e+02 6.000000e+01 1.830000e+02 1.815000e+02 2.045000e+02 3.150000e+01 AnnTo 1.798333e+03 1.873026e+03 2.072018e+03 1.882434e+03 1.872456e+03 3.670789e+03 0.000000e+00 Monthly AnnMn 8.592623e-01 4.663268e-01 1.331860e-02 -1.102298e+00 -2.461950e-02 8.838818e-01 3.443160e+00 AnnSd 5.732488e+00 5.185376e+00 5.374702e+00 5.066755e+00 5.771958e+00 8.111981e+00 8.803569e+00 Sharpe 1.470256e+01 8.704316e+00 2.350253e-01 -2.331718e+01 -4.651670e-01 1.078672e+01 3.914899e+01 HitRate 1.253789e-01 1.186277e+00 -1.253789e-01 -3.289474e+00 -5.905208e+00 3.415541e+00 1.194682e+01 Beta -2.143911e-01 1.759100e-01 2.126023e-01 2.922530e-02 -2.717250e-01 5.733390e-02 1.000000e+00 Alpha 1.594307e+00 -1.305919e-01 -7.239893e-01 -1.206146e+00 9.119993e-01 6.823080e-01 0.000000e+00 DrawDn -2.211749e+01 -1.755338e+01 -2.341990e+01 -3.304944e+01 -1.962549e+01 -3.283320e+01 -3.389934e+01 DDnBeg 2.013557e+07 2.015561e+07 2.008569e+07 2.007567e+07 2.008574e+07 2.011332e+07 2.007104e+07 DDnN 5.925000e+01 5.325000e+01 8.050000e+01 1.142500e+02 9.275000e+01 7.975000e+01 1.675000e+01 AnnTo 9.181122e+02 9.441268e+02 1.025070e+03 9.458668e+02 9.558644e+02 1.873977e+03 0.000000e+00 Quarterly AnnMn 3.295929e-01 4.152660e-01 7.154109e-01 -7.292608e-01 -6.263440e-01 9.559369e-01 3.451610e+00 AnnSd 5.794036e+00 5.301457e+00 5.132181e+00 5.188782e+00 5.724617e+00 8.131716e+00 9.179433e+00 Sharpe 6.154272e+00 9.435514e+00 1.401781e+01 -1.377800e+01 -1.092749e+01 1.267380e+01 3.767121e+01 HitRate -3.290923e+00 1.054264e+00 1.715146e+00 -4.324956e+00 -2.740188e+00 1.942184e+00 1.746167e+01 Beta -2.369065e-01 1.636358e-01 8.158010e-02 1.080071e-01 -2.068641e-01 -3.004240e-02 1.000000e+00 Alpha 1.135097e+00 -1.370291e-01 4.521481e-01 -1.106061e+00 7.020840e-02 1.064889e+00 0.000000e+00 DrawDn -2.704203e+01 -1.920558e+01 -2.239518e+01 -2.713270e+01 -2.511779e+01 -3.025123e+01 -2.855401e+01 DDnBeg 2.010762e+07 2.010603e+07 2.010535e+07 2.009227e+07 2.010698e+07 2.010221e+07 2.007107e+07 DDnN 3.515385e+01 2.384615e+01 1.338462e+01 2.884615e+01 3.238462e+01 2.915385e+01 4.692308e+00 AnnTo 2.840802e+02 2.937503e+02 3.197109e+02 2.923635e+02 2.962539e+02 5.803341e+02 0.000000e+00 Semi-Annual AnnMn -2.066210e-02 1.276884e-01 5.146328e-01 -2.292361e-01 -3.585738e-01 3.379117e-01 3.264504e+00 AnnSd 5.822752e+00 5.376476e+00 5.347787e+00 5.229883e+00 6.130645e+00 8.255394e+00 9.887262e+00 Sharpe -1.655782e-01 3.306547e+00 1.004748e+01 -5.699820e+00 -7.793136e+00 4.201010e+00 3.310566e+01 HitRate -4.580018e+00 1.856764e+00 3.541114e+00 -1.198055e+00 -5.800177e+00 1.547303e-01 1.798851e+01 Beta -2.242735e-01 1.342617e-01 1.036034e-01 1.510856e-01 -2.597929e-01 3.551940e-02 1.000000e+00 Alpha 6.974777e-01 -3.053511e-01 1.878828e-01 -7.064477e-01 4.637045e-01 2.337731e-01 0.000000e+00 DrawDn -2.541962e+01 -1.940877e+01 -1.932164e+01 -2.102064e+01 -2.470467e+01 -3.157175e+01 -2.575678e+01 DDnBeg 2.010609e+07 2.010686e+07 2.010299e+07 2.009335e+07 2.009459e+07 2.010918e+07 2.007133e+07 DDnN 1.703846e+01 1.323077e+01 8.884615e+00 1.184615e+01 1.607692e+01 1.396154e+01 2.500000e+00 AnnTo 1.463938e+02 1.482309e+02 1.584944e+02 1.500237e+02 1.469496e+02 2.933434e+02 0.000000e+00 Weekly AnnMn 2.372581e+00 6.815386e-01 -8.791404e-01 -2.389582e-01 -2.078578e+00 4.451159e+00 3.476831e+00 AnnSd 6.260578e+00 5.326132e+00 5.469632e+00 4.857803e+00 5.295975e+00 8.598031e+00 8.039942e+00 Sharpe 3.789715e+01 1.279613e+01 -1.607312e+01 -4.919058e+00 -3.924826e+01 5.176952e+01 4.324447e+01 HitRate 6.561680e-01 1.837270e+00 2.624672e-01 -1.837270e+00 -3.280840e+00 4.593176e+00 7.874016e+00 Beta -2.393223e-01 1.297566e-01 1.945765e-01 1.248160e-02 -1.449182e-01 -9.440410e-02 1.000000e+00 Alpha 3.204664e+00 2.303969e-01 -1.555650e+00 -2.823546e-01 -1.574722e+00 4.779386e+00 0.000000e+00 DrawDn -2.578518e+01 -1.187249e+01 -3.145387e+01 -2.879276e+01 -4.591276e+01 -1.665329e+01 -3.582700e+01 DDnBeg 2.010070e+07 2.015063e+07 2.007062e+07 2.007113e+07 2.009023e+07 2.015031e+07 2.007103e+07 DDnN 3.670000e+02 1.840000e+02 1.080000e+02 3.590000e+02 6.610000e+02 7.200000e+01 5.600000e+01 AnnTo 3.519054e+03 3.734297e+03 4.101007e+03 3.683049e+03 3.664827e+03 7.183881e+03 0.000000e+00 Annualized mean one-week returns bbk(x, y, 1, hz[1], 5, doW, T, 0, delay)$annSumm # DISPLAY CALENDAR-YEAR RETURNS Q1 Q2 Q3 Q4 Q5 TxB uRet nPrds 2007 -2.4122844 -2.9281361 0.7414669 7.2192330 -3.9200625 1.5077781 4.083357 29 2008 29.1522240 -4.6785452 -22.0729442 -11.1138780 13.9772844 15.1749396 -27.417418 52 2009 6.4124890 1.1163040 -3.1291277 -1.2997502 -3.0387662 9.4512552 24.141740 52 2010 5.7183550 7.6806292 3.4536324 -1.6937395 -17.1545069 22.8728619 9.964876 53 2011 -10.3604197 4.3103565 10.6435884 -2.4120009 -2.8143096 -7.5461101 -2.537112 52 2012 -1.1367680 -0.7117367 2.0261140 1.2976442 -1.6705560 0.5337881 9.883816 52 2013 2.6279524 4.7064922 6.3791526 -7.6044317 -5.1431857 7.7711381 4.569832 52 2014 2.1802066 5.4420210 -8.2037308 -3.0747093 2.8671087 -0.6869021 4.051446 52 2015 -1.4005917 -5.7200547 4.7768224 6.2858051 -4.1305645 2.7299728 -1.968191 52 2016 -7.4249604 2.6231142 0.3093421 1.2888183 1.8997082 -9.3246686 5.941342 53 2017 -0.8577682 1.6320792 3.7327545 -0.6461399 -4.1895722 3.3318040 8.457597 52 2018 4.6698097 -8.1107388 -6.2823623 8.9437148 0.5019179 4.1678918 -6.120206 52 2019 3.5749133 3.6099025 -3.7295227 -3.4221217 -0.0957650 3.6706782 11.606858 52 2020 -2.0794748 -1.2686212 -0.2701569 4.3393082 -1.7446176 -0.3348573 5.327833 52 2021 4.3972934 1.6127993 -0.5310650 0.5268859 -6.7191421 11.1164355 3.660437 53 2022 15.2813277 -22.1781233 -11.9846421 27.4165416 -10.2812434 25.5625711 -32.953700 2 "],["fx-strategy.html", "6 FX Strategy 6.1 Overview 6.2 Daily Percentage Flow 6.3 Strategy Implementation", " 6 FX Strategy 6.1 Overview The FX Strategy an equity based currency rotation strategy, which ranks different foreign exchange markets of countries across a customized universe of both developed and emerging markets. This approach uses the stated allocations of equity funds with a cross-border focus and calculates percentage flow into currencies. In terms of twenty-day percentage flows, the top fifth of ACWI currencies outperform the bottom fifth by over 4% per year. The strategy works best amongst G10 currencies, but adds value across the board. 6.2 Daily Percentage Flow The FX Strategy developed by EPFR Global is based on percentage flow into currencies. In this section, the reader will gain an understanding of the aggregations which can be used to create a signal as well as the methodology behind daily percentage flow calculations. 6.2.1 Aggregations The first step is defining a subset of data to capture in calculating our signal. This strategy requires; Equity funds with a cross-boarder focus. These are essentially any fund that has a mandate spanning more than one country. The vast majority of these will be global and regional funds. Funds must report both daily flows and country allocations, since these values are needed to calculate Daily Percentage Flow. Cross-border equity funds, which report their country allocations and their fund flows, are a subset of those that only report their fund flows to EPFR. The figure below shows EPFRs coverage of this universe over time compared to our total coverage. Updated at the end of July each year Users looking for more specific detail can customize this aggregation even further using EPFRs fund-level or share class-level granularity. Some good examples would be Active/Passive, ETF or Mutual funds, Institutional or Retail. Users can use these tags to different degrees in creating aggregated signals to backtest. Further detail about this is available in section 3. This can be achieved using fund-level flow files or reaching out to EPFRs quant team for customized aggregations. 6.2.2 Calculation To begin calculating the Daily Percentage flow, we start with our subset of cross-border equity funds. To calculate the funds impact on a currency, we scale a funds flow by multiplying it against its stated country allocation to countries using that currency, which is available in EPFRs Country Allocation Database, on that day. EPFR releases country allocations of all funds on the \\(23^{\\text{rd}}\\) of each month (or the next available business day) at a monthly frequency. Hence, our calculation assumes constant country allocation between two consecutive release dates within the month. We then apply the same procedure to all funds with a fund flow and country allocation information and then sum the flows for each currency across all funds. \\[\\text{Total Impact}_{c,t} = \\sum^{N}_{i=m}{\\text{Flow}_i \\times \\text{Allocation}_i}\\] Where: \\(\\text{Total Impact}\\) = the impact on a currency \\(c\\), across all funds \\(i\\), for day \\(t\\) Additionally, we repeat the process across the same funds Assets held under Management (AuM), to get the total AuM held in a country. \\[\\text{Total AuM}_{c,t} = \\sum^{N}_{i=m}{\\text{AuM}_i \\times \\text{Allocation}_i}\\] Where: \\(\\text{Total AuM}\\) = the assets held in a currency \\(c\\), across all funds \\(i\\), for day \\(t\\) Finally, to find the daily percentage flow into a currency, we divide the Total Impact by the Total AuM. Then we repeat this across all different currencies for the entire history. \\[\\text{Percentage Flow}_{c,t} = \\frac{\\text{Total Impact}_{c,t}}{\\text{Total AuM}_{c,t}}\\] Where: \\(\\text{Percentage Flow}\\) = the scaled flow as a percentage into a currency \\(c\\), across all funds \\(i\\), for day \\(t\\) 6.2.3 Flow File The users may create flow percentages for their desired FX aggregations and granularity using the methodology described in the previous section. EPFR also provides a pre-calculated aggregation for its users for the FX Strategy. This file can be found on the FTP under the strategies folder. Please refer to the FTP Folder Structure section for the exact location of this file. This file contains daily flow data for 37 currencies and is updated daily at 5:00 PM est. with a T+1 day lag. For this demonstration, we use the pre-calculated file FX-daily.csv. Below shows a snippet of what this file contains. ARS AUD BRL CAD CHF CLP CNY CZK EGP GBP HUF IDR ILS INR JPY KRW MXN MYR NOK NZD PEN PHP PLN RUB SEK SGD THB TRY TWD ZAR USD EUR COP PKR MAD VND KWD 20211101 0.0951956 0.0233905 0.0531035 0.0202649 0.0136956 0.0124597 0.0367144 0.0407582 -0.0099286 0.0090056 0.0118883 0.1026345 0.0227167 0.0737441 0.0112211 0.0301935 0.0528308 0.0424596 0.0250291 0.0173961 0.0983880 0.0163313 0.0203153 0.0215331 0.0123521 0.0900571 0.0397868 0.0233967 0.0497635 0.0189636 0.0685452 0.0189129 0.0224357 0.0303562 -0.0103072 0.8665646 0.0194010 20211102 0.0942688 0.1720646 0.0354197 0.0926433 0.1266238 0.0483671 0.0439027 0.0997758 0.0577666 0.1349584 0.0443015 0.0569077 0.1323832 0.0365911 0.1419282 0.0531659 0.0390083 0.0445662 0.1255181 0.1113622 0.0203433 0.0313609 0.0642350 0.0238631 0.1268904 0.1101238 0.0296805 0.0237125 0.0333732 0.0499104 0.0734126 0.0871499 0.0279508 0.1460037 0.4337403 0.2818899 0.0219654 20211103 0.1089451 0.0281285 0.0119845 0.0444364 0.0277638 0.0629838 -0.0350514 0.0068424 0.0119071 0.0291382 -0.1047347 -0.0518616 0.0345525 -0.0505650 0.0315910 -0.0571837 0.0040123 -0.0116749 0.0233558 0.0178623 0.1200862 0.0187043 0.0137464 -0.1117925 0.0391676 0.0475302 -0.0179925 -0.0101861 -0.0450093 -0.0520347 0.0805151 0.0191132 0.0292842 0.0274489 0.0643956 0.0460473 0.0091691 20211104 0.1709919 -0.0259282 0.0564485 0.0874951 0.0043956 0.0467287 0.0444763 0.0745158 0.0684307 -0.0166590 0.0797765 0.0305560 0.0520806 0.0258512 0.0087418 0.0312389 0.0481343 0.0384663 0.0556068 0.0611684 0.0294905 0.0120414 0.0888283 0.0753834 0.0201077 0.0511059 0.0432660 0.0708349 0.0285761 0.0572320 0.0638265 0.0284550 -0.0555654 0.0271469 0.1155251 0.0171987 0.0251618 20211105 0.0811163 0.1188916 0.0800062 0.0734998 0.0777874 0.0776826 0.0057655 0.0836201 0.0531953 0.0844895 0.0276116 0.0705703 0.0725028 0.0420120 0.0905879 0.0299950 0.0407647 0.0050806 0.0596630 0.0803083 0.1076447 0.0376676 0.0586687 0.0104820 0.0812884 0.0810288 0.0379855 -0.1275677 0.0186814 0.0148055 0.0585696 0.0532085 0.1140662 0.0360098 0.0395516 0.2613120 0.0587149 20211108 0.1190233 0.0493196 0.0734154 0.0765835 0.0388529 0.0709732 -0.0219888 0.0400470 0.0860873 0.0218624 0.0117260 0.0381564 0.0477718 0.0318928 0.0512294 0.0285295 0.0356488 0.0659128 -0.0015951 0.0117628 0.0458379 0.0270478 0.0694772 0.0586824 0.0310111 0.0067519 0.0474835 0.0182717 0.0363691 0.0662294 0.0588712 0.0100783 0.0906876 0.1440479 0.3945202 0.1805212 0.0545738 We will download this file from the ftp using ftp.get(), more about this function can be referred to in section 2.2. file &lt;- &quot;EPFRHistory/Strategies/daily/FX-daily.csv&quot; # PATH TO .csv FILE fldr &lt;- &quot;C:\\\\temp&quot; # LOCAL FOLDER ftp.get(file, fldr, &quot;filetransport.epfrglobal.com&quot;, w = &quot;username&quot;, h = &quot;password&quot;, &quot;ftp&quot;) # DOWNLOADS FILE FROM FTP TO LOCAL FOLDER, USING CREDENTIALS After downloading the csv file you will store its path as flow.file. A quick way to do this is shown below: flow.file &lt;- paste(fldr, ftp.file(file), sep = &quot;\\\\&quot;) # STORES FLOW FILE PATH, C:\\\\temp\\\\FX-daily.csv 6.2.4 Return File The return file for this strategy should contain daily Exchange rates for each of the currencies in the flow file, which the user can find with their own resources. For this demonstration, we will the file which has been locally named ExchRates.csv. ret.file &lt;- &quot;ExchRates.csv&quot; For your reference a snippet of our return file looks like this XDR AUD EGP INR MXN NZD QAR TRY ZAR ARS BRL EUR IDR KRW NOK PHP SEK CAD CHF CLP HUF JPY PEN RUB TWD CNY CZK GBP ILS MYR PLN SGD THB JOR PKR MAD COP CNH VND KWD 20211101 1.41082 1.3294 15.7013 74.8737 20.8426 1.3914 3.6413 9.5398 15.4295 99.8178 5.6863 0.8616 14248 1176.55 8.4063 50.420 8.5196 1.2369 0.9091 814.50 310.85 114.00 3.9915 71.5655 27.847 6.3977 22.0433 0.7318 3.1118 4.1515 3.9776 1.3485 33.455 NA 171.9875 9.0679 3767.37 6.3942 22753 0.30175 20211102 1.41229 1.3459 15.7013 74.6850 20.7844 1.4060 3.6413 9.6039 15.4431 99.8679 5.6863 0.8636 14253 1174.40 8.5277 50.385 8.5747 1.2411 0.9146 812.70 310.30 113.96 4.0086 71.5587 27.844 6.4000 22.0850 0.7344 3.1341 4.1487 3.9801 1.3491 33.247 NA 171.9875 9.0760 3795.98 6.4028 22744 0.30165 20211103 1.41165 1.3428 15.7013 74.4600 20.5391 1.3964 3.6415 9.6447 15.2702 99.9104 5.5533 0.8612 14298 1181.60 8.5071 50.570 8.5383 1.2391 0.9118 812.75 308.91 114.01 4.0125 71.7646 27.847 6.4066 21.9603 0.7307 3.1179 4.1540 3.9457 1.3478 33.315 NA 169.9842 9.0661 3834.24 6.3948 22743 0.30165 20211104 1.40951 1.3513 15.7010 74.4600 20.5443 1.4080 3.6417 9.7039 15.2169 99.9493 5.6035 0.8654 14338 1182.65 8.5559 50.615 8.5900 1.2456 0.9127 814.31 311.80 113.76 4.0139 71.7646 27.860 6.3972 21.9440 0.7407 3.1084 4.1540 3.9827 1.3511 33.410 NA 169.9625 9.0867 3869.34 6.3974 22686 0.30165 20211105 1.40747 1.3513 15.7010 74.4600 20.3434 1.4047 3.6417 9.6922 15.0529 99.9498 5.5423 0.8644 14328 1185.05 8.5590 50.345 8.5711 1.2457 0.9127 811.55 310.26 113.41 4.0105 71.2684 27.874 6.3988 21.8231 0.7409 3.1112 4.1588 3.9750 1.3502 33.320 NA 169.9625 9.0781 3878.85 6.3944 22698 0.30165 20211108 1.41024 1.3471 15.7010 74.0237 20.3424 1.3952 3.6417 9.6853 14.9184 100.0605 5.5423 0.8630 14258 1183.20 8.5045 50.175 8.5765 1.2442 0.9133 802.58 311.67 113.23 4.0140 71.2364 27.836 6.3927 21.7967 0.7371 3.1113 4.1543 3.9637 1.3476 33.055 NA 169.9625 9.0574 3876.38 6.3884 22658 0.30175 6.3 Strategy Implementation The final step is implementing this strategy to create a signal. Lets begin by reading in the flow and return files to our R studio work space. x &lt;- read.csv(flow.file, row.names = 1) # GET FLOW PERCENTAGE y &lt;- 1/read.csv(ret.file, row.names = 1) # READ IN EXCHANGE RATES One of our first options is choosing the universe we want to use. EPFR has tested this signal within three different universes of countries ACWI (All Country World Index), G10 (ten of the most heavily traded currencies), EM (Emerging Markets). For this example, we choose ACWI, which includes 52 countries and 37 currencies. idx &lt;- &quot;ACWI&quot; # ACWI/G10/EM If needed, subset the flow file \\(x\\) and return file \\(y\\) to the selected universe \\(idx\\). For this example, our flow file is already in the ACWI universe but below is an example of how we set this using the functions Ctry.msci.members.rng() and Ctry.info(), from the library('EPFR') is used. This function first returns a list of two letter country codes from \\(idx\\) and then will produce a unique list of three letter currency codes that these countries use. idx.curr &lt;- unique(Ctry.info(Ctry.msci.members(idx, &quot;&quot;), &quot;Curr&quot;)) # CURRENCY CLASSIFICATION 2016 if (idx != &quot;G10&quot;) idx.curr &lt;- union(Ctry.info(Ctry.msci(idx)[, &quot;CCODE&quot;], &quot;Curr&quot;), idx.curr) else idx &lt;- NULL # CAPTURE INDEX CHANGES if (is.element(&quot;EM&quot;, idx)) idx.curr &lt;- setdiff(idx.curr, c(&quot;USD&quot;, &quot;EUR&quot;)) # ENSURE NO OVERLAP BETWEEN DEVELOPED AND EM CURRENCIES x &lt;- x[, is.element(dimnames(x)[[2]], idx.curr)] # SUBSET TO CURRENCIES OF INTEREST We will also subset the return file \\(y\\) to use the same currencies as \\(x\\). Divide by XDR? y &lt;- y[, dimnames(x)[[2]]]/y[, &quot;XDR&quot;] # CURRENCIES OF INTEREST ON AN SDR BASE (OTHERWISE &lt;get.fwdRet&gt; THINKS THE USD NEVER TRADES!) * Note: subsetting can be also be done when creating the flow and return files 6.3.1 Compounding Flows Next, we set up a variable for our look-back period, which can also be called a flow window. This variable will be the window of time we use to create a trailing compounded daily percentage flow. The look-back period we choose for our demonstrations is 20 days. lookback &lt;- 20 # FLOW WINDOW (IN WEEKDAYS) - 20 day look back period Using a function from the library('EPFR'), compound.flows() compounds the daily percentage flow over the trailing lookback period for each country. x &lt;- compound.flows(x, lookback, F) # COMPOUND FLOWS ARS AUD BRL CAD CHF CLP CNY CZK EGP GBP HUF IDR ILS INR JPY KRW MXN MYR NOK NZD PEN PHP PLN RUB SEK SGD THB TRY TWD ZAR USD EUR COP PKR MAD VND KWD 20211101 1.921229 0.4688510 1.0674461 0.4060791 0.2742695 0.2494883 0.7368544 0.8183282 -0.1983854 0.1802669 0.2380354 2.0728273 0.4553152 1.4852609 0.2246616 0.6056059 1.0619356 0.8526254 0.5017740 0.3484977 1.9862619 0.3271341 0.4070905 0.4315440 0.2473326 1.8166358 0.7987499 0.4689765 0.9999885 0.3799556 1.379868 0.3789380 0.4496709 0.6088787 -0.2059428 18.8350610 0.3887351 20211102 1.902356 3.4981287 0.7107828 1.8692653 2.5631727 0.9717993 0.8817259 2.0145440 1.1616943 2.7340565 0.8897690 1.1443288 2.6812282 0.7343707 2.8771638 1.0687064 0.7830633 0.8951068 2.5405232 2.2509661 0.4076537 0.6290899 1.2925696 0.4783448 2.5686343 2.2256709 0.5952861 0.4753202 0.6695847 1.0029553 1.478536 1.7575035 0.5605032 2.9609335 9.0417309 5.7913594 0.4402254 20211103 2.201602 0.5640756 0.2399627 0.8924906 0.5567438 1.2672409 -0.6986992 0.1369361 0.2384106 0.5843795 -2.0739822 -1.0321382 0.6933227 -1.0064571 0.6337199 -1.1374831 0.0802763 -0.2332400 0.4681542 0.3578528 2.4293218 0.3747505 0.2752870 -2.2122629 0.7862732 0.9549091 -0.3592348 -0.2035245 -0.8963470 -1.0355660 1.622678 0.3829586 0.5873170 0.5504126 1.2958217 0.9249854 0.1835423 20211104 3.475965 -0.5172885 1.1350444 1.7645243 0.0879490 0.9387348 0.8932952 1.5009133 1.3775472 -0.3326538 1.6076798 0.6128980 1.0467821 0.5182954 0.1749804 0.6266352 0.9670999 0.7721434 1.1180306 1.2305035 0.5914647 0.2411035 1.7916372 1.5185143 0.4029235 1.0270948 0.8688852 1.4262714 0.5730770 1.1508846 1.284299 0.5706411 -1.1054617 0.5443404 2.3360354 0.3445358 0.5044400 20211105 1.634890 2.4048807 1.6123438 1.4803050 1.5672978 1.5651723 0.1153727 1.6857541 1.0692995 1.7034224 0.5536822 1.4209082 1.4600869 0.8436028 1.8274354 0.6016128 0.8184591 0.1016602 1.2000467 1.6184789 2.1750529 0.7560540 1.1799373 0.2098499 1.6383837 1.6331112 0.7624569 -2.5206689 0.3742916 0.2965261 1.177933 1.0695659 2.3062143 0.7226642 0.7940118 5.3580365 1.1808708 20211108 2.407575 0.9910272 1.4785931 1.5428648 0.7799334 1.4290758 -0.4388591 0.8039943 1.7358993 0.4381568 0.2347812 0.7659005 0.9597848 0.6397921 1.0295891 0.5721386 0.7153961 1.3265440 -0.0318968 0.2355181 0.9207620 0.5423476 1.3987541 1.1802137 0.6220521 0.1351241 0.9539657 0.3660692 0.7299007 1.3329559 1.184032 0.2017590 1.8294634 2.9207246 8.1932500 3.6730166 1.0971539 6.3.2 Ranking Currencies Next, we sort the currencies in each universe into five equal bins based on their 20-day Percentage Flow Compounded value for the selected holding period. To do this, we will use the function from library('EPFR'), called bbk(). This function will output a standardized backtest result. Th bbk() function requires our compounded daily percentage flow file, a return file, and our selected universe. Please refer to the library documentation for the complete list of parameters of this function. The first parameter we add is the number of bins we want to use. For our case, we want to use 5 because our strategy is to go long the top fifth and short the bottom fifth. nBin &lt;- 5 # NUMBER OF BINS Since EPFR data is published with T+1 day lag and is released around 5:00 pm EST, we account for a T+2 day delay in our model since that is when one can trade on the information. Users interested in more timely signals can also use the T+2 Open Prices for backtesting purposes. EPFR also offers a Premium Daily offering, an earlier release of the end-of-day data covering a significant subset of fund-level flow information. delay &lt;- 2 # DELAY IN KNOWING DATA (IN WEEKDAYS) - data takes time to have It is also important to note that this model will need to be re-balanced weekly. The day of the week the rebalancing occurs is at the discretion of the user. For this example we will set the day of the week to trade as Friday. doW &lt;- 5 # DAY OF THE WEEK YOU WILL TRADE ON (5 = FRIDAYS) Additionally, we also evaluate the returns for different holding periods. The user can input return horizions that they are interested in here. For this example we define a return horizon for weekly, fortnightly, monthly, bi-monthly, quarterly, and semi-annually. hz &lt;- c(5, 10, 20, 45, 65, 130) # RETURN HORIZON (IN WEEKDAYS) - holding periods Now that we have defined all of our inputs, to rank the currencies into quintiles by their 20-day percentage flow, we call function bbk() for a 1-week holding period. z &lt;- bbk(x, y, 1, hz[1], nBin, doW, T, 0, delay, idx) 6.3.3 Model Twenty-day flow percentage ranked into quintiles (computed only where forward returns are available) z[[&quot;bins&quot;]] ARS AUD BRL CAD CHF CLP CNY CZK EGP GBP HUF IDR ILS INR JPY KRW MXN MYR NOK NZD PEN PHP PLN RUB SEK SGD THB TRY TWD ZAR USD EUR COP PKR MAD VND KWD 20211126 2 1 4 1 2 5 4 5 4 3 5 3 1 3 1 5 5 2 4 1 3 2 5 5 3 1 1 4 3 4 2 3 4 2 NA NA 2 20211119 1 2 4 1 2 3 3 5 1 2 5 3 3 3 2 4 4 4 2 2 5 3 5 5 1 1 4 5 4 4 1 3 5 1 NA NA 2 20211112 1 1 4 2 1 2 5 1 3 2 5 4 1 5 1 5 5 4 2 3 4 4 3 4 1 2 4 3 5 3 2 2 5 3 NA NA 3 20211105 1 2 3 1 2 1 4 4 3 2 5 5 2 5 2 5 4 4 3 3 1 3 3 5 1 1 4 4 5 5 1 3 2 2 NA NA 4 Quintile Returns over the equal-weight universe z[[&quot;rets&quot;]] Q1 Q2 Q3 Q4 Q5 TxB uRet 20211126 -0.3143363 0.1764768 -0.2019239 -1.2014936 1.5412770 -1.8556133 0.2425766 20211119 0.4821234 0.4455518 0.6382267 -0.5845357 -0.9813663 1.4634897 -1.5876957 20211112 0.2961060 -0.0445711 -1.3523419 0.5025271 0.5982800 -0.3021740 -1.5849676 20211105 0.2478839 -0.1722851 0.1182566 0.0903440 -0.2841994 0.5320833 -0.7804385 6.3.4 Performance Performance over all holding periods fcn &lt;- function(retW) {as.matrix(bbk(x, y, 1, retW, 5, doW, T, 0, delay, idx)$summ)} # DEFINE SUMMARY FUNCTION t(mat.ex.array(sapply(split(hz, hz), fcn, simplify = &quot;array&quot;))) # WRITE SUMMARIES Q1 Q2 Q3 Q4 Q5 TxB uRet Bi-Monthly AnnMn 3.659518e-01 4.261550e-02 1.029430e-01 -4.731490e-02 -4.479541e-01 8.139059e-01 -2.244316e+00 AnnSd 3.269173e+00 2.870747e+00 2.944263e+00 3.081608e+00 3.450197e+00 5.666856e+00 1.087973e+01 Sharpe 1.244038e+01 1.670734e+00 4.418545e+00 -1.376680e+00 -1.311764e+01 1.504197e+01 -2.071072e+01 HitRate 2.640834e+00 2.357610e+00 1.988795e+00 1.847183e+00 -2.707750e-01 1.976346e+00 -2.113290e+00 Beta -4.504540e-02 -3.077880e-02 -3.884060e-02 3.417070e-02 8.152680e-02 -1.265721e-01 1.000000e+00 Alpha 2.621562e-01 -2.807460e-02 1.733410e-02 3.017190e-02 -2.631299e-01 5.252861e-01 0.000000e+00 DrawDn -1.236127e+01 -1.049253e+01 -1.279761e+01 -1.385315e+01 -1.820612e+01 -2.223186e+01 -5.788302e+01 DDnBeg 2.013302e+07 2.010939e+07 2.010846e+07 2.010954e+07 2.009822e+07 2.012294e+07 2.011062e+07 DDnN 2.077778e+01 3.333333e+01 3.233333e+01 3.655556e+01 4.855556e+01 2.733333e+01 5.122222e+01 AnnTo 4.139082e+02 4.544748e+02 4.433571e+02 4.482824e+02 4.260119e+02 8.399201e+02 0.000000e+00 Fortnightly AnnMn 3.228152e-01 4.711120e-01 4.441306e-01 -5.324450e-02 -1.132851e+00 1.455666e+00 -2.351059e+00 AnnSd 3.428686e+00 3.018408e+00 3.259224e+00 3.095792e+00 3.559849e+00 5.850413e+00 9.989152e+00 Sharpe 9.464187e+00 1.605952e+01 1.365886e+01 -1.860001e+00 -3.339792e+01 2.507405e+01 -2.354025e+01 HitRate -3.280795e-01 4.579443e-01 4.593113e-01 1.236791e+00 -2.805763e+00 2.938362e+00 -3.277378e-01 Beta 2.862000e-04 -3.186500e-03 -4.496780e-02 -3.289300e-03 5.103720e-02 -5.075100e-02 1.000000e+00 Alpha 3.238001e-01 4.638544e-01 3.383386e-01 -6.119330e-02 -1.013049e+00 1.336849e+00 0.000000e+00 DrawDn -1.161437e+01 -7.098433e+00 -9.674186e+00 -1.607684e+01 -2.783884e+01 -1.661634e+01 -6.085436e+01 DDnBeg 2.019562e+07 2.012562e+07 2.013081e+07 2.009601e+07 2.011080e+07 2.017567e+07 2.011058e+07 DDnN 3.900000e+01 3.200000e+01 1.300000e+02 2.125000e+02 2.390000e+02 3.700000e+01 2.300000e+02 AnnTo 1.800094e+03 2.014802e+03 1.991776e+03 2.029122e+03 1.844908e+03 3.645002e+03 0.000000e+00 Monthly AnnMn 9.109228e-01 1.634903e-01 1.227630e-02 -3.123483e-01 -7.733168e-01 1.684240e+00 -2.357752e+00 AnnSd 3.483450e+00 2.870210e+00 3.179843e+00 3.358640e+00 3.301151e+00 5.646567e+00 1.034825e+01 Sharpe 2.770431e+01 6.641630e+00 2.173767e-01 -9.320418e+00 -2.407100e+01 3.112093e+01 -2.280232e+01 HitRate 4.517085e+00 1.242078e+00 5.931386e-01 1.956462e-01 -1.762882e+00 5.431937e+00 -1.640259e+00 Beta -1.744710e-02 -1.599650e-02 -3.851500e-02 8.386800e-03 6.323350e-02 -8.068060e-02 1.000000e+00 Alpha 8.704199e-01 1.251400e-01 -7.884870e-02 -2.907842e-01 -6.254477e-01 1.495867e+00 0.000000e+00 DrawDn -1.019128e+01 -1.083900e+01 -1.268465e+01 -2.059624e+01 -2.064839e+01 -1.654785e+01 -5.962323e+01 DDnBeg 2.017344e+07 2.010562e+07 2.014559e+07 2.008819e+07 2.010326e+07 2.011572e+07 2.011055e+07 DDnN 2.750000e+01 2.125000e+01 5.300000e+01 1.072500e+02 1.247500e+02 4.250000e+01 1.157500e+02 AnnTo 9.065563e+02 1.000787e+03 1.004002e+03 1.008091e+03 9.374313e+02 1.843988e+03 0.000000e+00 Quarterly AnnMn 5.133031e-01 3.305175e-01 -4.117000e-02 -2.530197e-01 -5.408357e-01 1.054139e+00 -2.208900e+00 AnnSd 3.196699e+00 2.845606e+00 3.051886e+00 2.999375e+00 3.347713e+00 5.446590e+00 1.106813e+01 Sharpe 1.681142e+01 1.117917e+01 -1.692233e+00 -6.812789e+00 -1.591663e+01 1.951696e+01 -2.003489e+01 HitRate 5.305040e+00 2.519894e+00 1.724138e+00 9.283820e-01 -1.856764e+00 4.641910e+00 -5.172414e+00 Beta -2.785050e-02 -3.877500e-02 -3.950180e-02 3.315330e-02 7.606810e-02 -1.039186e-01 1.000000e+00 Alpha 4.532385e-01 2.437019e-01 -1.255514e-01 -1.815748e-01 -3.735467e-01 8.267852e-01 0.000000e+00 DrawDn -9.948877e+00 -9.580469e+00 -1.206465e+01 -1.461782e+01 -2.037046e+01 -1.769754e+01 -5.611454e+01 DDnBeg 2.012209e+07 2.010906e+07 2.011376e+07 2.008459e+07 2.010835e+07 2.012141e+07 2.010832e+07 DDnN 1.661538e+01 1.576923e+01 2.515385e+01 3.315385e+01 2.900000e+01 1.776923e+01 3.692308e+01 AnnTo 2.924214e+02 3.201718e+02 3.135657e+02 3.184919e+02 3.004042e+02 5.928256e+02 0.000000e+00 Semi-Annual AnnMn 4.322030e-01 4.633787e-01 -9.155060e-02 -2.324240e-01 -5.588495e-01 9.910525e-01 -2.148353e+00 AnnSd 3.173137e+00 2.763453e+00 2.997886e+00 2.909363e+00 3.393845e+00 5.399690e+00 1.169062e+01 Sharpe 1.493992e+01 1.740971e+01 -3.759073e+00 -7.333405e+00 -1.658202e+01 1.852100e+01 -1.851764e+01 HitRate 6.380258e+00 4.215612e+00 1.534672e+00 -9.236453e-01 -3.078818e+00 7.275483e+00 -6.721296e+00 Beta -2.784240e-02 -4.348010e-02 -3.591450e-02 1.514510e-02 9.542740e-02 -1.232698e-01 1.000000e+00 Alpha 3.733726e-01 3.669320e-01 -1.646337e-01 -1.997245e-01 -3.557899e-01 7.291625e-01 0.000000e+00 DrawDn -9.919553e+00 -7.897396e+00 -1.227886e+01 -1.414037e+01 -1.706241e+01 -1.513292e+01 -5.279337e+01 DDnBeg 2.012017e+07 2.010453e+07 2.009955e+07 2.009611e+07 2.011068e+07 2.012094e+07 2.010597e+07 DDnN 8.538462e+00 1.026923e+01 1.361538e+01 1.473077e+01 1.569231e+01 7.269231e+00 1.896154e+01 AnnTo 1.490958e+02 1.616830e+02 1.568036e+02 1.609671e+02 1.539729e+02 3.030687e+02 0.000000e+00 Weekly AnnMn 5.983488e-01 8.968437e-01 4.277803e-01 -1.233923e+00 -6.206563e-01 1.219005e+00 -2.371707e+00 AnnSd 3.603818e+00 3.614139e+00 3.088837e+00 3.342272e+00 3.828723e+00 6.091824e+00 9.707049e+00 Sharpe 1.660319e+01 2.481487e+01 1.384923e+01 -3.691867e+01 -1.621053e+01 2.001051e+01 -2.443284e+01 HitRate 3.002611e+00 1.566580e+00 1.436031e+00 0.000000e+00 -1.044386e+00 6.527415e-01 -2.219321e+00 Beta 1.273000e-04 1.593800e-03 -6.092560e-02 2.204970e-02 3.876490e-02 -3.863760e-02 1.000000e+00 Alpha 5.986507e-01 9.006237e-01 2.832825e-01 -1.181627e+00 -5.287173e-01 1.127368e+00 0.000000e+00 DrawDn -8.386794e+00 -8.312592e+00 -1.098149e+01 -2.513949e+01 -1.959935e+01 -1.792222e+01 -6.285831e+01 DDnBeg 2.009021e+07 2.007091e+07 2.012041e+07 2.008023e+07 2.013063e+07 2.009021e+07 2.011043e+07 DDnN 2.300000e+02 1.010000e+02 1.830000e+02 6.440000e+02 4.440000e+02 2.300000e+02 4.640000e+02 AnnTo 3.454544e+03 4.001181e+03 3.975967e+03 4.018637e+03 3.598234e+03 7.052779e+03 0.000000e+00 Annualized mean one-week returns bbk(x, y, 1, hz[1], nBin, doW, T, 0, delay, idx)$annSumm # DISPLAY CALENDAR-YEAR RETURNS Q1 Q2 Q3 Q4 Q5 TxB uRet nPrds 2007 0.2516514 -3.0223681 -3.1650345 0.6431651 5.2925861 -5.0409347 13.1946215 35 2008 2.7409669 -0.7663375 3.2042354 -5.4055047 0.2266398 2.5143271 -13.1533701 52 2009 -1.5291806 -1.6289655 0.1779812 1.9307456 1.4940522 -3.0232327 10.2375370 52 2010 1.2771189 -2.3973535 2.2347541 -1.2789899 -0.3607216 1.6378404 2.9512123 53 2011 -3.4098905 1.6363491 -0.0346503 0.9866233 1.1962787 -4.6061692 -4.1065988 52 2012 0.3759461 1.4990221 -2.2126676 0.5677893 0.0651689 0.3107772 3.4833257 52 2013 -0.4459152 0.1016178 -2.9508640 -0.5948434 3.9570220 -4.4029372 -4.9124563 52 2014 1.4214920 6.1682728 -0.8317866 -2.4685137 -4.9060910 6.3275830 -16.2172346 52 2015 4.9967529 4.6105364 -2.1201550 0.1100902 -8.3839956 13.3807484 -14.6408438 52 2016 0.0178822 -1.7268778 4.4124733 -2.6965363 0.7942841 -0.7764019 -6.0898082 53 2017 1.9424454 0.2965310 1.6799891 -2.1857760 -1.8833822 3.8258276 12.5654405 52 2018 1.0199171 1.8156397 -0.2277828 -7.5473248 4.1207386 -3.1008215 -9.3094558 52 2019 2.0396141 0.5351104 -0.5550176 0.9926044 -3.0963050 5.1359191 -0.9546108 52 2020 -1.7976431 -1.0896345 6.4825526 -4.5150249 1.9562170 -3.7538602 4.7790869 52 2021 -0.0290940 6.1525670 -0.9370289 3.5041970 -7.7443755 7.7152816 -8.2316355 53 2022 NaN NaN NaN NaN NaN NaN NaN 0 output: html_document "],["flow-percentage-dm-rates-strategy.html", "7 Flow-Percentage DM Rates Strategy 7.1 Overview 7.2 Daily Percentage Flow 7.3 Strategy Implementation", " 7 Flow-Percentage DM Rates Strategy 7.1 Overview The Flow-Percentage DM Rates Strategy is a bond based rotation strategy, which ranks different G10 10 Year Rates, based on a percentage flow indicator. This approach uses the stated allocations of bond funds with a cross-border focus and calculates percentage flow into G10 countries. In terms of twenty-day percentage flows, the top fifth of G10 10 year rates outperform the bottom fifth by around 22pbs per year. G10 Countries used in analysis are: 1. United States 2. Europe 3. United Kingdom 4. Japan 5. Australia 6. New Zealand 7. Canada 8. Switzerland 9. Norway 10. Sweden 7.2 Daily Percentage Flow The Flow-Percentage DM Rates Strategy developed by EPFR Global is based on percentage flow into countries via cross-border bond funds. In this section, the reader will gain an understanding of the aggregations which can be used to create a signal as well as the methodology behind daily percentage flow calculations. 7.2.1 Aggregations The first step is defining a subset of data to capture in calculating our signal. This strategy requires; Bond funds with a cross-boarder focus. These are essentially any fund that has a mandate spanning more than one country. The vast majority of these will be global and regional funds. Funds must report both daily flows and country allocations, since these values are needed to calculate Daily Percentage Flow. Cross-border bond funds, which report their country allocations and their fund flows, are a subset of those that only report their fund flows to EPFR. The figure below shows EPFRs coverage of this universe over time compared to our total coverage. Updated at the end of July each year Users looking for more specific detail can customize this aggregation even further using EPFRs fund-level or share class-level granularity. Some good examples would be Active/Passive, ETF or Mutual funds, Institutional or Retail. Users can use these tags to different degrees in creating aggregated signals to backtest. Further detail about this is available in section 3. This can be achieved using fund-level flow files or reaching out to EPFRs quant team for customized aggregations. 7.2.2 Calculation To begin calculating the Daily Percentage flow, we start with our subset of cross-border bond funds. To calculate the funds impact on a country, we scale a funds flow by multiplying it against its stated country allocation, which is available in EPFRs Country Allocation Database, on that day. EPFR releases country allocations of all funds on the \\(23^{\\text{rd}}\\) of each month (or the next available business day) at a monthly frequency. Hence, our calculation assumes constant country allocation between two consecutive release dates within the month. We then apply the same procedure to all funds with a fund flow and country allocation information and then sum the flows for each country across all funds. \\[\\text{Total Impact}_{c,t} = \\sum^{N}_{i=m}{\\text{Flow}_i \\times \\text{Allocation}_i}\\] Where: \\(\\text{Total Impact}\\) = the impact on a country \\(c\\), across all funds \\(i\\), for day \\(t\\) Additionally, we repeat the process across the same funds Assets held under Management (AuM), to get the total AuM held in a country. \\[\\text{Total AuM}_{c,t} = \\sum^{N}_{i=m}{\\text{AuM}_i \\times \\text{Allocation}_i}\\] Where: \\(\\text{Total AuM}\\) = the assets held in a country \\(c\\), across all funds \\(i\\), for day \\(t\\) Finally, to find the daily percentage flow for a country, we divide the Total Impact by the Total AuM. Then we repeat this across all different countries for the entire history. \\[\\text{Percentage Flow}_{c,t} = \\frac{\\text{Total Impact}_{c,t}}{\\text{Total AuM}_{c,t}}\\] Where: \\(\\text{Percentage Flow}\\) = the scaled flow as a percentage into a country \\(c\\), across all funds \\(i\\), for day \\(t\\) 7.2.3 Flow File The users may create flow percentages for their desired country aggregations and granularity using the methodology described in the previous section. EPFR also provides a pre-calculated aggregation for its users for the Flow-Percentage DM Strategy. This file can be found on the FTP under the strategies folder. Please refer to the FTP Folder Structure section for the exact location of this file. This file contains daily cross-border bond fund flow data for 52 countries and is updated daily at 5:00 PM est. with a T+1 day lag. For this demonstration, we use the pre-calculated file FloPctCtry-B-daily.csv. Below shows a snippet of what this file contains. AU CA CH DE GB JP NO NZ SE US 20211201 -0.0007020 -0.0015174 0.0004122 -0.0010397 -0.0006906 -0.0001968 0.0009049 -0.0003805 0.0001095 -0.0023166 20211202 -0.0004375 -0.0002560 -0.0002809 -0.0009476 -0.0004765 0.0000392 -0.0008211 -0.0010253 -0.0007682 -0.0004119 20211203 -0.0003314 -0.0001907 0.0003749 0.0007579 0.0000204 -0.0007797 -0.0002024 0.0004397 0.0001894 -0.0009936 20211206 0.0000657 -0.0000962 -0.0011922 -0.0004092 -0.0005934 0.0005597 -0.0000267 -0.0003495 -0.0002973 -0.0013883 20211207 -0.0003327 -0.0001279 -0.0005822 -0.0005074 -0.0003590 0.0000254 -0.0005952 -0.0005382 -0.0007128 -0.0005743 20211208 -0.0006319 -0.0023702 -0.0002574 -0.0006398 -0.0007982 -0.0008411 -0.0022261 -0.0003871 0.0003074 -0.0012151 We will download this file from the ftp using ftp.get(), more about this function can be referred to in section 2.2. file &lt;- &quot;EPFRHistory/Strategies/daily/FloPctCtry-B-daily.csv&quot; # PATH TO .csv FILE fldr &lt;- &quot;C:\\\\temp&quot; # LOCAL FOLDER ftp.get(file, fldr, &quot;filetransport.epfrglobal.com&quot;, w = &quot;username&quot;, h = &quot;password&quot;, &quot;ftp&quot;) # DOWNLOADS FILE FROM FTP TO LOCAL FOLDER, USING CREDENTIALS After downloading the csv file you will store its path as flow.file. A quick way to do this is shown below: flow.file &lt;- paste(fldr, ftp.file(file), sep = &quot;\\\\&quot;) # STORES FLOW FILE PATH, C:\\\\temp\\\\FloPctCtry-B-daily.csv 7.2.4 Return File The return file for this strategy should contain daily bond returns for each of the countries in the flow file, which the user can find with their own resources. EPFR also provides Fund Return data, that can be used as a proxy to returns. To create a return file using EPFR daily flow data, the following equation can be used: \\[\\text{Fund Return}_{c,t} = \\frac{\\sum^{N}_{i=m} \\text{Portfolio Change}_i}{\\sum^{N}_{i=m} \\text{Assets Start}_i}\\] Where: \\(\\text{Fund Return}\\) = the return value of country \\(c\\), across all funds \\(i\\), for day \\(t\\) For this demonstration, we will the file which has been locally named g10rates.csv. ret.file &lt;- &quot;g10rates.csv&quot; For your reference a snippet of our return file looks like this AU CA CH DE GB JP NO NZ SE US 20211201 1.7300 1.494 -0.272 -0.345 0.820 0.065 1.488 2.458 0.147 1.405 20211202 1.6800 1.505 -0.306 -0.372 0.811 0.063 1.422 2.423 0.086 1.446 20211203 1.6100 1.437 -0.313 -0.391 0.747 0.053 1.471 2.390 0.084 1.345 20211206 1.5825 1.523 -0.329 -0.391 0.738 0.045 1.440 2.347 0.071 1.436 20211207 1.6475 1.579 -0.318 -0.377 0.730 0.056 1.460 2.418 0.064 1.476 20211208 1.6200 1.591 -0.287 -0.315 0.775 0.050 1.517 2.430 0.096 1.523 7.3 Strategy Implementation The final step is implementing this strategy to create a signal. Lets begin by reading in the flow and return files to our R studio work space. x &lt;- read.csv(flow.file, row.names = 1) # GET FLOW PERCENTAGE y &lt;- read.csv(ret.file, row.names = 1) # GET RETURN We must now make sure our files only use G10 countries and have the same columns. We will also subset the flow file \\(x\\) to use the same countries as \\(y\\). x &lt;- x[, is.element(dimnames(x)[[2]],dimnames(y)[[2]])] # SUBSET TO G10 COUNTRIES y &lt;- y[,dimnames(x)[[2]]] * Note: subsetting can be also be done when creating the flow and return files 7.3.1 Compounding Flows Next, we set up a variable for our look-back period, which can also be called a flow window. This variable will be the window of time we use to create a trailing compounded daily percentage flow. The look-back period we choose for our demonstrations is 20 days. lookback &lt;- 20 # FLOW WINDOW (IN WEEKDAYS) - 20 day look back period Again, using a function from the library('EPFR'), compound.flows() compounds the daily percentage flow over the trailing lookback period for each country. x &lt;- compound.flows(x, lookback, F) # COMPOUND FLOWS AU CA CH DE GB JP NO NZ SE US 20211201 -0.0140398 -0.0303430 0.0082447 -0.0207913 -0.0138116 -0.0039352 0.0180996 -0.0076095 0.0021904 -0.0463225 20211202 -0.0087503 -0.0051208 -0.0056184 -0.0189494 -0.0095304 0.0007835 -0.0164210 -0.0205034 -0.0153626 -0.0082383 20211203 -0.0066284 -0.0038134 0.0074981 0.0151591 0.0004079 -0.0155935 -0.0040488 0.0087939 0.0037885 -0.0198695 20211206 0.0013137 -0.0019235 -0.0238412 -0.0081845 -0.0118680 0.0111940 -0.0005341 -0.0069902 -0.0059450 -0.0277629 20211207 -0.0066546 -0.0025586 -0.0116425 -0.0101484 -0.0071789 0.0005085 -0.0119029 -0.0107644 -0.0142548 -0.0114857 20211208 -0.0126372 -0.0473937 -0.0051485 -0.0127949 -0.0159634 -0.0168198 -0.0445135 -0.0077408 0.0061490 -0.0242992 7.3.2 Ranking Countries Next, we sort the countries in each universe into five equal bins based on their 20-day Percentage Flow Compounded value for the selected holding period. To do this, we will use the function from library('EPFR'), called bbk(). This function will output a standardized backtest result. The bbk() function requires our compounded daily percentage flow file, a return file, and our selected universe. Please refer to the library documentation for the complete list of parameters of this function. The first parameter we add is the number of bins we want to use. For our case, we want to use 5 because our strategy is to go long the top fifth and short the bottom fifth. nBin &lt;- 5 # NUMBER OF BINS Since EPFR data is published with T+1 day lag and is released around 5:00 pm EST, we account for a T+2 day delay in our model since that is when one can trade on the information. Users interested in more timely signals can also use the T+2 Open Prices for backtesting purposes. EPFR also offers a Premium Daily offering, an earlier release of the end-of-day data covering a significant subset of fund-level flow information. delay &lt;- 2 # DELAY IN KNOWING DATA (IN WEEKDAYS) - data takes time to have It is also important to note that this model will need to be re-balanced weekly. The day of the week the rebalancing occurs is at the discretion of the user. For this example we will set the day of the week to trade as Friday. doW &lt;- 5 # DAY OF THE WEEK YOU WILL TRADE ON (5 = FRIDAYS) Additionally, we also evaluate the returns for different holding periods. The user can input return horizions that they are interested in here. For this example we define a return horizon for weekly, fortnightly, monthly, bi-monthly, quarterly, and semi-annually. hz &lt;- c(5, 10, 20, 45, 65, 130) # RETURN HORIZON (IN WEEKDAYS) - holding periods Now that we have defined all of our inputs, to rank the countries into quintiles by their 20-day percentage flow, we call function bbk() for a 1-week holding period. z &lt;- bbk(x, y, 1, hz[1], nBin, doW, T, 0, delay) 7.3.3 Model 7.3.3.1 Bins Twenty-day flow percentage ranked into quintiles (computed only where forward returns are available) z[[&quot;bins&quot;]] AU CA CH DE GB JP NO NZ SE US 20211231 2 1 5 2 4 1 4 3 3 5 20211224 1 1 4 4 3 2 5 2 3 5 20211217 2 5 1 4 3 4 3 2 1 5 20211210 2 5 1 3 3 4 5 2 1 4 20211203 4 5 1 4 3 2 1 3 2 5 7.3.3.2 BinRets z[[&quot;rets&quot;]] Q1 Q2 Q3 Q4 Q5 TxB uRet 20211231 51.442115 -39.570908 28.0605000 6.266251 -46.197958 97.6400732 7.4724679 20211224 2.463720 4.776837 15.4648343 -25.883092 3.177701 -0.7139815 -0.8314551 20211217 12.257956 -9.276437 6.5525480 -8.296766 -1.237302 13.4952573 9.7792957 20211210 14.047904 -4.970177 5.6663565 -9.253285 -5.490799 19.5387025 0.2760121 20211203 3.469073 -3.888138 0.4014854 -5.360392 5.377972 -1.9088995 0.7659459 7.3.4 Performance Performance over all holding periods fcn &lt;- function(retW) {as.matrix(bbk(x, y, 1, retW, 5, doW, T, 0, delay)$summ)} # DEFINE SUMMARY FUNCTION mat.ex.array3d(sapply(split(hz, hz), fcn, simplify = &quot;array&quot;)) # WRITE SUMMARIES Q1 Q2 Q3 Q4 Q5 TxB uRet Bi-Monthly AnnMn NaN NaN NaN NaN NaN 3.960461e+01 NaN AnnSd NaN NaN NaN NaN NaN 4.433182e+02 NaN Sharpe NaN NaN NaN NaN NaN 1.045168e+01 NaN HitRate 2.605259e+00 -2.872722e+00 7.812737e-01 1.564067e+00 3.191974e-01 1.516095e+00 -7.046664e+00 Beta NaN NaN NaN NaN NaN NaN 1.000000e+00 Alpha NaN NaN NaN NaN NaN NaN 0.000000e+00 DrawDn NaN NaN NaN NaN NaN -1.258419e+03 NaN DDnBeg 2.017503e+07 2.014851e+07 2.016947e+07 2.015502e+07 2.016955e+07 2.016294e+07 2.014724e+07 DDnN 1.122222e+01 2.488889e+01 1.466667e+01 1.755556e+01 1.400000e+01 1.855556e+01 3.022222e+01 AnnTo 4.142944e+02 4.451478e+02 4.500616e+02 4.386741e+02 4.089670e+02 8.232614e+02 0.000000e+00 Fortnightly AnnMn NaN NaN NaN NaN Inf -2.237922e+02 NaN AnnSd NaN NaN NaN NaN NaN 1.139407e+03 NaN Sharpe NaN NaN NaN NaN NaN -2.005806e+01 NaN HitRate -1.370417e+00 -2.876854e+00 4.233981e+00 1.112395e+00 -1.827676e+00 -6.630390e-02 -4.757534e+00 Beta NaN NaN NaN NaN NaN NaN 1.000000e+00 Alpha NaN NaN NaN NaN NaN NaN 0.000000e+00 DrawDn NaN NaN NaN NaN NaN -6.012032e+03 NaN DDnBeg 2.020032e+07 2.020037e+07 2.017547e+07 2.017542e+07 2.015037e+07 2.018102e+07 2.016542e+07 DDnN 7.500000e+00 5.500000e+00 2.050000e+01 7.500000e+01 8.050000e+01 4.400000e+01 1.000000e+00 AnnTo 1.774081e+03 1.918541e+03 1.979709e+03 1.998417e+03 1.836994e+03 3.611075e+03 0.000000e+00 Monthly AnnMn NaN NaN NaN NaN Inf -9.517222e+01 NaN AnnSd NaN NaN NaN NaN NaN 8.127343e+02 NaN Sharpe NaN NaN NaN NaN NaN 2.960262e+00 NaN HitRate 1.901996e-01 -4.522156e+00 2.283759e+00 1.241410e+00 -2.208088e+00 3.526413e+00 -5.408077e+00 Beta NaN NaN NaN NaN NaN NaN 1.000000e+00 Alpha NaN NaN NaN NaN NaN NaN 0.000000e+00 DrawDn NaN NaN NaN NaN NaN -3.865981e+03 NaN DDnBeg 2.020029e+07 2.014819e+07 2.018562e+07 2.019059e+07 2.016569e+07 2.018551e+07 2.018042e+07 DDnN 1.025000e+01 5.675000e+01 1.125000e+01 8.750000e+00 4.100000e+01 2.650000e+01 2.000000e+00 AnnTo 9.131703e+02 9.941024e+02 9.856035e+02 9.907440e+02 9.430060e+02 1.856176e+03 0.000000e+00 Quarterly AnnMn NaN NaN NaN NaN NaN -1.247657e+01 NaN AnnSd NaN NaN NaN NaN NaN 4.706899e+02 NaN Sharpe NaN NaN NaN NaN NaN 9.543250e+00 NaN HitRate 2.623297e+00 2.771777e+00 2.367037e+00 4.585436e+00 -3.371847e-01 6.367467e-01 -1.009082e+01 Beta NaN NaN NaN NaN NaN NaN 1.000000e+00 Alpha NaN NaN NaN NaN NaN NaN 0.000000e+00 DrawDn NaN NaN NaN NaN NaN -1.483752e+03 NaN DDnBeg 2.016146e+07 2.016596e+07 2.017597e+07 2.016994e+07 2.016070e+07 2.015836e+07 2.013987e+07 DDnN 1.492308e+01 1.300000e+01 7.615385e+00 9.307692e+00 1.438462e+01 1.438462e+01 2.207692e+01 AnnTo 2.824934e+02 3.066313e+02 3.169761e+02 3.143236e+02 2.944297e+02 5.769231e+02 0.000000e+00 Semi-Annual AnnMn NaN NaN NaN NaN NaN -1.217973e+01 NaN AnnSd NaN NaN NaN NaN NaN 3.420400e+02 NaN Sharpe NaN NaN NaN NaN NaN 1.742681e+00 NaN HitRate -2.306745e+00 4.078249e+00 6.157635e-01 -1.705191e-01 1.970443e+00 1.373626e-01 -1.053903e+01 Beta NaN NaN NaN NaN NaN NaN 1.000000e+00 Alpha NaN NaN NaN NaN NaN NaN 0.000000e+00 DrawDn NaN NaN NaN NaN NaN -1.121633e+03 NaN DDnBeg 2.015262e+07 2.016450e+07 2.016902e+07 2.015572e+07 2.016339e+07 2.014186e+07 2.011220e+07 DDnN 8.961538e+00 6.461538e+00 5.269231e+00 7.653846e+00 7.423077e+00 1.080769e+01 1.642308e+01 AnnTo 1.486216e+02 1.549829e+02 1.603543e+02 1.541919e+02 1.520083e+02 3.006300e+02 0.000000e+00 Weekly AnnMn NaN NaN NaN NaN NaN -2.953599e+02 NaN AnnSd NaN NaN NaN NaN NaN 1.239273e+03 NaN Sharpe NaN NaN NaN NaN NaN -2.383333e+01 NaN HitRate -2.803129e+00 -2.549020e+00 3.455020e+00 3.594771e+00 -1.697128e+00 0.000000e+00 -4.367666e+00 Beta NaN NaN NaN NaN NaN NaN 1.000000e+00 Alpha NaN NaN NaN NaN NaN NaN 0.000000e+00 DrawDn NaN NaN NaN NaN NaN -8.287086e+03 NaN DDnBeg 2.020011e+07 2.020011e+07 2.020011e+07 2.020052e+07 2.020011e+07 2.019071e+07 2.015023e+07 DDnN 1.000000e+00 1.000000e+00 1.000000e+00 1.000000e+00 1.000000e+00 6.000000e+01 1.000000e+00 AnnTo 3.536815e+03 3.910183e+03 3.988251e+03 4.028982e+03 3.655614e+03 7.192428e+03 0.000000e+00 Annualized mean one-week returns bbk(x, y, 1, hz[1], 5, doW, T, 0, delay, sprds = T)$annSumm # DISPLAY CALENDAR-YEAR RETURNS Q1 Q2 Q3 Q4 Q5 TxB uRet nPrds 2007 0.5033670 -0.6138451 0.3276700 0.1173064 -0.3026330 0.8060000 -0.0337912 33 2008 -0.2093356 -0.1848356 0.2229644 0.2379644 -0.0766856 -0.1326500 -1.3718144 52 2009 -0.6084222 -0.2835722 1.0324278 -0.1407222 0.0199278 -0.6283500 0.7055722 52 2010 -0.1813143 0.1488366 -0.2382200 0.2213914 -0.0399822 -0.1413321 -0.2631876 53 2011 -0.5316200 -0.6752200 -0.1883200 0.5611800 0.8394300 -1.3710500 -1.3339800 52 2012 -0.1117867 0.3275133 -0.3790867 0.1083133 0.0031133 -0.1149000 -0.2274133 52 2013 -0.1958367 0.0111633 -0.1093367 0.3628133 -0.0899867 -0.1058500 0.8895367 52 2014 -0.2419333 -0.3356333 0.3821167 -0.1591833 0.3064667 -0.5484000 -1.0756667 52 2015 -0.1455556 -0.2805556 -0.0171556 0.4684444 -0.0194556 -0.1261000 -0.1212444 52 2016 -0.0479338 -0.2000092 0.3141040 0.2351229 -0.2966507 0.2487170 -0.1517266 53 2017 0.1266778 -0.3133222 -0.2373222 0.0766778 0.3366778 -0.2100000 -0.0056778 52 2018 -0.1141722 -0.0566722 0.1923278 -0.0126722 -0.0186722 -0.0955000 -0.0833278 52 2019 -0.2295744 0.1840256 0.2881256 0.1624256 -0.3652244 0.1356500 -0.4894756 52 2020 0.0838800 -0.0709200 0.2119300 0.0063300 -0.2312200 0.3151000 -0.4174300 52 2021 -0.0849998 -0.0329508 -0.0682715 0.2065926 -0.0661621 -0.0188377 0.5731621 53 2022 -0.6448000 -0.1187333 0.5936667 -0.1274000 0.2972667 -0.9420667 3.0567333 3 "]]
